// Code generated by protoc-gen-go.
// source: TSTArchives.proto
// DO NOT EDIT!

/*
Package TST is a generated protocol buffer package.

It is generated from these files:
	TSTArchives.proto

It has these top-level messages:
	CellID
	TableSize
	CellRange
	TableSelection
	TileRowInfo
	Tile
	TileStorage
	PopUpMenuModel
	TableDataList
	TableRBTree
	HeaderStorageBucket
	HeaderStorage
	DataStore
	TableInfoArchive
	EditingStateArchive
	WPTableInfoArchive
	TableStyleNetworkArchive
	TableModelArchive
	DurationWrapperArchive
	Cell
	MergeRegionMapArchive
	CellMapArchive
	DoubleStyleMapArchive
	StyleTableMapArchive
	SelectionArchive
	FilterRuleArchive
	TableStyleArchive
	CellStyleArchive
	FormulaPredicateArchive
	ConditionalStyleSetArchive
	FilterSetArchive
	TokenAttachmentArchive
	FormulaArchive
	ExpressionNodeArchive
	BooleanNodeArchive
	NumberNodeArchive
	StringNodeArchive
	IdentifierNodeArchive
	ArrayNodeArchive
	ListNodeArchive
	OperatorNodeArchive
	PostfixOperatorNodeArchive
	PrefixOperatorNodeArchive
	FunctionNodeArchive
	FunctionEndNodeArchive
	DateNodeArchive
	ReferenceNodeArchive
	DurationNodeArchive
	ArgumentPlaceholderNodeArchive
	EmptyExpressionNodeArchive
	LayoutHintArchive
	CompletionTokenAttachmentArchive
	HiddenStateFormulaOwnerArchive
	RichTextPayloadArchive
	FormulaEqualsTokenAttachmentArchive
	CellRegion
*/
package TST

import (
	math "math"

	"github.com/dunhamsteve/iwork/proto/TSCE"
	"github.com/dunhamsteve/iwork/proto/TSD"
	"github.com/dunhamsteve/iwork/proto/TSK"
	"github.com/dunhamsteve/iwork/proto/TSP"
	"github.com/dunhamsteve/iwork/proto/TSS"
	"github.com/dunhamsteve/iwork/proto/TSWP"
	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type CellType int32

const (
	CellType_genericCellType      CellType = 0
	CellType_spanCellType         CellType = 1
	CellType_numberCellType       CellType = 2
	CellType_textCellType         CellType = 3
	CellType_formulaCellType      CellType = 4
	CellType_dateCellType         CellType = 5
	CellType_boolCellType         CellType = 6
	CellType_durationCellType     CellType = 7
	CellType_formulaErrorCellType CellType = 8
	CellType_automaticCellType    CellType = 9
)

var CellType_name = map[int32]string{
	0: "genericCellType",
	1: "spanCellType",
	2: "numberCellType",
	3: "textCellType",
	4: "formulaCellType",
	5: "dateCellType",
	6: "boolCellType",
	7: "durationCellType",
	8: "formulaErrorCellType",
	9: "automaticCellType",
}
var CellType_value = map[string]int32{
	"genericCellType":      0,
	"spanCellType":         1,
	"numberCellType":       2,
	"textCellType":         3,
	"formulaCellType":      4,
	"dateCellType":         5,
	"boolCellType":         6,
	"durationCellType":     7,
	"formulaErrorCellType": 8,
	"automaticCellType":    9,
}

func (x CellType) Enum() *CellType {
	p := new(CellType)
	*p = x
	return p
}
func (x CellType) String() string {
	return proto.EnumName(CellType_name, int32(x))
}
func (x *CellType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CellType_value, data, "CellType")
	if err != nil {
		return err
	}
	*x = CellType(value)
	return nil
}

type CellValueType int32

const (
	CellValueType_emptyCellValueType    CellValueType = 0
	CellValueType_numberCellValueType   CellValueType = 1
	CellValueType_stringCellValueType   CellValueType = 2
	CellValueType_providedCellValueType CellValueType = 3
	CellValueType_dateCellValueType     CellValueType = 4
	CellValueType_boolCellValueType     CellValueType = 5
	CellValueType_durationCellValueType CellValueType = 6
	CellValueType_errorCellValueType    CellValueType = 7
	CellValueType_richTextCellType      CellValueType = 8
)

var CellValueType_name = map[int32]string{
	0: "emptyCellValueType",
	1: "numberCellValueType",
	2: "stringCellValueType",
	3: "providedCellValueType",
	4: "dateCellValueType",
	5: "boolCellValueType",
	6: "durationCellValueType",
	7: "errorCellValueType",
	8: "richTextCellType",
}
var CellValueType_value = map[string]int32{
	"emptyCellValueType":    0,
	"numberCellValueType":   1,
	"stringCellValueType":   2,
	"providedCellValueType": 3,
	"dateCellValueType":     4,
	"boolCellValueType":     5,
	"durationCellValueType": 6,
	"errorCellValueType":    7,
	"richTextCellType":      8,
}

func (x CellValueType) Enum() *CellValueType {
	p := new(CellValueType)
	*p = x
	return p
}
func (x CellValueType) String() string {
	return proto.EnumName(CellValueType_name, int32(x))
}
func (x *CellValueType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CellValueType_value, data, "CellValueType")
	if err != nil {
		return err
	}
	*x = CellValueType(value)
	return nil
}

type SelectionTypeArchive int32

const (
	SelectionTypeArchive_cellSelectionType        SelectionTypeArchive = 0
	SelectionTypeArchive_rowSelectionType         SelectionTypeArchive = 1
	SelectionTypeArchive_columnSelectionType      SelectionTypeArchive = 2
	SelectionTypeArchive_cellEditingSelectionType SelectionTypeArchive = 3
	SelectionTypeArchive_tableNameSelectionType   SelectionTypeArchive = 4
	SelectionTypeArchive_tableSelectionType       SelectionTypeArchive = 5
)

var SelectionTypeArchive_name = map[int32]string{
	0: "cellSelectionType",
	1: "rowSelectionType",
	2: "columnSelectionType",
	3: "cellEditingSelectionType",
	4: "tableNameSelectionType",
	5: "tableSelectionType",
}
var SelectionTypeArchive_value = map[string]int32{
	"cellSelectionType":        0,
	"rowSelectionType":         1,
	"columnSelectionType":      2,
	"cellEditingSelectionType": 3,
	"tableNameSelectionType":   4,
	"tableSelectionType":       5,
}

func (x SelectionTypeArchive) Enum() *SelectionTypeArchive {
	p := new(SelectionTypeArchive)
	*p = x
	return p
}
func (x SelectionTypeArchive) String() string {
	return proto.EnumName(SelectionTypeArchive_name, int32(x))
}
func (x *SelectionTypeArchive) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SelectionTypeArchive_value, data, "SelectionTypeArchive")
	if err != nil {
		return err
	}
	*x = SelectionTypeArchive(value)
	return nil
}

type FillDirectionArchive int32

const (
	FillDirectionArchive_kTSTFillDownArchive  FillDirectionArchive = 1
	FillDirectionArchive_kTSTFillUpArchive    FillDirectionArchive = 2
	FillDirectionArchive_kTSTFillRightArchive FillDirectionArchive = 3
	FillDirectionArchive_kTSTFillLeftArchive  FillDirectionArchive = 4
)

var FillDirectionArchive_name = map[int32]string{
	1: "kTSTFillDownArchive",
	2: "kTSTFillUpArchive",
	3: "kTSTFillRightArchive",
	4: "kTSTFillLeftArchive",
}
var FillDirectionArchive_value = map[string]int32{
	"kTSTFillDownArchive":  1,
	"kTSTFillUpArchive":    2,
	"kTSTFillRightArchive": 3,
	"kTSTFillLeftArchive":  4,
}

func (x FillDirectionArchive) Enum() *FillDirectionArchive {
	p := new(FillDirectionArchive)
	*p = x
	return p
}
func (x FillDirectionArchive) String() string {
	return proto.EnumName(FillDirectionArchive_name, int32(x))
}
func (x *FillDirectionArchive) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FillDirectionArchive_value, data, "FillDirectionArchive")
	if err != nil {
		return err
	}
	*x = FillDirectionArchive(value)
	return nil
}

type MergeActionArchive int32

const (
	MergeActionArchive_mergeActionMerge   MergeActionArchive = 0
	MergeActionArchive_mergeActionUnmerge MergeActionArchive = 1
)

var MergeActionArchive_name = map[int32]string{
	0: "mergeActionMerge",
	1: "mergeActionUnmerge",
}
var MergeActionArchive_value = map[string]int32{
	"mergeActionMerge":   0,
	"mergeActionUnmerge": 1,
}

func (x MergeActionArchive) Enum() *MergeActionArchive {
	p := new(MergeActionArchive)
	*p = x
	return p
}
func (x MergeActionArchive) String() string {
	return proto.EnumName(MergeActionArchive_name, int32(x))
}
func (x *MergeActionArchive) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MergeActionArchive_value, data, "MergeActionArchive")
	if err != nil {
		return err
	}
	*x = MergeActionArchive(value)
	return nil
}

type HideShowActionArchive int32

const (
	HideShowActionArchive_hideShowActionHide HideShowActionArchive = 0
	HideShowActionArchive_hideShowActionShow HideShowActionArchive = 1
)

var HideShowActionArchive_name = map[int32]string{
	0: "hideShowActionHide",
	1: "hideShowActionShow",
}
var HideShowActionArchive_value = map[string]int32{
	"hideShowActionHide": 0,
	"hideShowActionShow": 1,
}

func (x HideShowActionArchive) Enum() *HideShowActionArchive {
	p := new(HideShowActionArchive)
	*p = x
	return p
}
func (x HideShowActionArchive) String() string {
	return proto.EnumName(HideShowActionArchive_name, int32(x))
}
func (x *HideShowActionArchive) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HideShowActionArchive_value, data, "HideShowActionArchive")
	if err != nil {
		return err
	}
	*x = HideShowActionArchive(value)
	return nil
}

type PopUpMenuModel_CellValueType int32

const (
	PopUpMenuModel_NIL_TYPE     PopUpMenuModel_CellValueType = 1
	PopUpMenuModel_BOOLEAN_TYPE PopUpMenuModel_CellValueType = 2
	PopUpMenuModel_DATE_TYPE    PopUpMenuModel_CellValueType = 3
	PopUpMenuModel_NUMBER_TYPE  PopUpMenuModel_CellValueType = 4
	PopUpMenuModel_STRING_TYPE  PopUpMenuModel_CellValueType = 5
)

var PopUpMenuModel_CellValueType_name = map[int32]string{
	1: "NIL_TYPE",
	2: "BOOLEAN_TYPE",
	3: "DATE_TYPE",
	4: "NUMBER_TYPE",
	5: "STRING_TYPE",
}
var PopUpMenuModel_CellValueType_value = map[string]int32{
	"NIL_TYPE":     1,
	"BOOLEAN_TYPE": 2,
	"DATE_TYPE":    3,
	"NUMBER_TYPE":  4,
	"STRING_TYPE":  5,
}

func (x PopUpMenuModel_CellValueType) Enum() *PopUpMenuModel_CellValueType {
	p := new(PopUpMenuModel_CellValueType)
	*p = x
	return p
}
func (x PopUpMenuModel_CellValueType) String() string {
	return proto.EnumName(PopUpMenuModel_CellValueType_name, int32(x))
}
func (x *PopUpMenuModel_CellValueType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PopUpMenuModel_CellValueType_value, data, "PopUpMenuModel_CellValueType")
	if err != nil {
		return err
	}
	*x = PopUpMenuModel_CellValueType(value)
	return nil
}

type TableDataList_ListType int32

const (
	TableDataList_STRING                      TableDataList_ListType = 1
	TableDataList_FORMAT                      TableDataList_ListType = 2
	TableDataList_FORMULA                     TableDataList_ListType = 3
	TableDataList_STYLE                       TableDataList_ListType = 4
	TableDataList_FORMULA_ERROR               TableDataList_ListType = 5
	TableDataList_CUSTOM_FORMAT               TableDataList_ListType = 6
	TableDataList_MULTIPLE_CHOICE_LIST_FORMAT TableDataList_ListType = 7
	TableDataList_RICH_TEXT_PAYLOAD           TableDataList_ListType = 8
	TableDataList_CONDITIONAL_STYLE           TableDataList_ListType = 9
	TableDataList_COMMENT_STORAGE             TableDataList_ListType = 10
)

var TableDataList_ListType_name = map[int32]string{
	1:  "STRING",
	2:  "FORMAT",
	3:  "FORMULA",
	4:  "STYLE",
	5:  "FORMULA_ERROR",
	6:  "CUSTOM_FORMAT",
	7:  "MULTIPLE_CHOICE_LIST_FORMAT",
	8:  "RICH_TEXT_PAYLOAD",
	9:  "CONDITIONAL_STYLE",
	10: "COMMENT_STORAGE",
}
var TableDataList_ListType_value = map[string]int32{
	"STRING":                      1,
	"FORMAT":                      2,
	"FORMULA":                     3,
	"STYLE":                       4,
	"FORMULA_ERROR":               5,
	"CUSTOM_FORMAT":               6,
	"MULTIPLE_CHOICE_LIST_FORMAT": 7,
	"RICH_TEXT_PAYLOAD":           8,
	"CONDITIONAL_STYLE":           9,
	"COMMENT_STORAGE":             10,
}

func (x TableDataList_ListType) Enum() *TableDataList_ListType {
	p := new(TableDataList_ListType)
	*p = x
	return p
}
func (x TableDataList_ListType) String() string {
	return proto.EnumName(TableDataList_ListType_name, int32(x))
}
func (x *TableDataList_ListType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TableDataList_ListType_value, data, "TableDataList_ListType")
	if err != nil {
		return err
	}
	*x = TableDataList_ListType(value)
	return nil
}

type FormulaPredicateArchive_FormulaPredicateType int32

const (
	FormulaPredicateArchive_PredNone                   FormulaPredicateArchive_FormulaPredicateType = 0
	FormulaPredicateArchive_TextStartsWith             FormulaPredicateArchive_FormulaPredicateType = 1
	FormulaPredicateArchive_TextEndsWith               FormulaPredicateArchive_FormulaPredicateType = 2
	FormulaPredicateArchive_TextContains               FormulaPredicateArchive_FormulaPredicateType = 3
	FormulaPredicateArchive_TextDoesNotContain         FormulaPredicateArchive_FormulaPredicateType = 4
	FormulaPredicateArchive_ValueEqual                 FormulaPredicateArchive_FormulaPredicateType = 5
	FormulaPredicateArchive_ValueNotEqual              FormulaPredicateArchive_FormulaPredicateType = 6
	FormulaPredicateArchive_ValueGreaterThan           FormulaPredicateArchive_FormulaPredicateType = 7
	FormulaPredicateArchive_ValueGreaterThanOrEqual    FormulaPredicateArchive_FormulaPredicateType = 8
	FormulaPredicateArchive_ValueLessThan              FormulaPredicateArchive_FormulaPredicateType = 9
	FormulaPredicateArchive_ValueLessThanOrEqual       FormulaPredicateArchive_FormulaPredicateType = 10
	FormulaPredicateArchive_ValueAboveAverage          FormulaPredicateArchive_FormulaPredicateType = 11
	FormulaPredicateArchive_ValueBelowAverage          FormulaPredicateArchive_FormulaPredicateType = 12
	FormulaPredicateArchive_ValueBetween               FormulaPredicateArchive_FormulaPredicateType = 13
	FormulaPredicateArchive_Formula                    FormulaPredicateArchive_FormulaPredicateType = 14
	FormulaPredicateArchive_Duplicates                 FormulaPredicateArchive_FormulaPredicateType = 15
	FormulaPredicateArchive_Uniques                    FormulaPredicateArchive_FormulaPredicateType = 16
	FormulaPredicateArchive_DateIsToday                FormulaPredicateArchive_FormulaPredicateType = 17
	FormulaPredicateArchive_DateIsYesterday            FormulaPredicateArchive_FormulaPredicateType = 18
	FormulaPredicateArchive_DateIsTomorrow             FormulaPredicateArchive_FormulaPredicateType = 19
	FormulaPredicateArchive_DateIsTheDate              FormulaPredicateArchive_FormulaPredicateType = 20
	FormulaPredicateArchive_DateBeforeTheDate          FormulaPredicateArchive_FormulaPredicateType = 21
	FormulaPredicateArchive_DateAfterTheDate           FormulaPredicateArchive_FormulaPredicateType = 22
	FormulaPredicateArchive_DateIsInTheRange           FormulaPredicateArchive_FormulaPredicateType = 23
	FormulaPredicateArchive_DateInTheNext              FormulaPredicateArchive_FormulaPredicateType = 24
	FormulaPredicateArchive_DateInTheLast              FormulaPredicateArchive_FormulaPredicateType = 25
	FormulaPredicateArchive_DateIsExactly              FormulaPredicateArchive_FormulaPredicateType = 26
	FormulaPredicateArchive_DateBeforeRelative         FormulaPredicateArchive_FormulaPredicateType = 27
	FormulaPredicateArchive_DateAfterRelative          FormulaPredicateArchive_FormulaPredicateType = 28
	FormulaPredicateArchive_DateBetweenRelative        FormulaPredicateArchive_FormulaPredicateType = 29
	FormulaPredicateArchive_ValueTop                   FormulaPredicateArchive_FormulaPredicateType = 30
	FormulaPredicateArchive_ValueBottom                FormulaPredicateArchive_FormulaPredicateType = 31
	FormulaPredicateArchive_ValueNotBetween            FormulaPredicateArchive_FormulaPredicateType = 32
	FormulaPredicateArchive_DateInThis                 FormulaPredicateArchive_FormulaPredicateType = 33
	FormulaPredicateArchive_IsBlank                    FormulaPredicateArchive_FormulaPredicateType = 34
	FormulaPredicateArchive_IsNotBlank                 FormulaPredicateArchive_FormulaPredicateType = 35
	FormulaPredicateArchive_TextIs                     FormulaPredicateArchive_FormulaPredicateType = 36
	FormulaPredicateArchive_TextIsNot                  FormulaPredicateArchive_FormulaPredicateType = 37
	FormulaPredicateArchive_DurationEqual              FormulaPredicateArchive_FormulaPredicateType = 38
	FormulaPredicateArchive_DurationNotEqual           FormulaPredicateArchive_FormulaPredicateType = 39
	FormulaPredicateArchive_DurationGreaterThan        FormulaPredicateArchive_FormulaPredicateType = 40
	FormulaPredicateArchive_DurationGreaterThanOrEqual FormulaPredicateArchive_FormulaPredicateType = 41
	FormulaPredicateArchive_DurationLessThan           FormulaPredicateArchive_FormulaPredicateType = 42
	FormulaPredicateArchive_DurationLessThanOrEqual    FormulaPredicateArchive_FormulaPredicateType = 43
	FormulaPredicateArchive_DurationBetween            FormulaPredicateArchive_FormulaPredicateType = 44
	FormulaPredicateArchive_DurationNotBetween         FormulaPredicateArchive_FormulaPredicateType = 45
	FormulaPredicateArchive_DurationAboveAverage       FormulaPredicateArchive_FormulaPredicateType = 46
	FormulaPredicateArchive_DurationBelowAverage       FormulaPredicateArchive_FormulaPredicateType = 47
	FormulaPredicateArchive_DurationTop                FormulaPredicateArchive_FormulaPredicateType = 48
	FormulaPredicateArchive_DurationBottom             FormulaPredicateArchive_FormulaPredicateType = 49
)

var FormulaPredicateArchive_FormulaPredicateType_name = map[int32]string{
	0:  "PredNone",
	1:  "TextStartsWith",
	2:  "TextEndsWith",
	3:  "TextContains",
	4:  "TextDoesNotContain",
	5:  "ValueEqual",
	6:  "ValueNotEqual",
	7:  "ValueGreaterThan",
	8:  "ValueGreaterThanOrEqual",
	9:  "ValueLessThan",
	10: "ValueLessThanOrEqual",
	11: "ValueAboveAverage",
	12: "ValueBelowAverage",
	13: "ValueBetween",
	14: "Formula",
	15: "Duplicates",
	16: "Uniques",
	17: "DateIsToday",
	18: "DateIsYesterday",
	19: "DateIsTomorrow",
	20: "DateIsTheDate",
	21: "DateBeforeTheDate",
	22: "DateAfterTheDate",
	23: "DateIsInTheRange",
	24: "DateInTheNext",
	25: "DateInTheLast",
	26: "DateIsExactly",
	27: "DateBeforeRelative",
	28: "DateAfterRelative",
	29: "DateBetweenRelative",
	30: "ValueTop",
	31: "ValueBottom",
	32: "ValueNotBetween",
	33: "DateInThis",
	34: "IsBlank",
	35: "IsNotBlank",
	36: "TextIs",
	37: "TextIsNot",
	38: "DurationEqual",
	39: "DurationNotEqual",
	40: "DurationGreaterThan",
	41: "DurationGreaterThanOrEqual",
	42: "DurationLessThan",
	43: "DurationLessThanOrEqual",
	44: "DurationBetween",
	45: "DurationNotBetween",
	46: "DurationAboveAverage",
	47: "DurationBelowAverage",
	48: "DurationTop",
	49: "DurationBottom",
}
var FormulaPredicateArchive_FormulaPredicateType_value = map[string]int32{
	"PredNone":                   0,
	"TextStartsWith":             1,
	"TextEndsWith":               2,
	"TextContains":               3,
	"TextDoesNotContain":         4,
	"ValueEqual":                 5,
	"ValueNotEqual":              6,
	"ValueGreaterThan":           7,
	"ValueGreaterThanOrEqual":    8,
	"ValueLessThan":              9,
	"ValueLessThanOrEqual":       10,
	"ValueAboveAverage":          11,
	"ValueBelowAverage":          12,
	"ValueBetween":               13,
	"Formula":                    14,
	"Duplicates":                 15,
	"Uniques":                    16,
	"DateIsToday":                17,
	"DateIsYesterday":            18,
	"DateIsTomorrow":             19,
	"DateIsTheDate":              20,
	"DateBeforeTheDate":          21,
	"DateAfterTheDate":           22,
	"DateIsInTheRange":           23,
	"DateInTheNext":              24,
	"DateInTheLast":              25,
	"DateIsExactly":              26,
	"DateBeforeRelative":         27,
	"DateAfterRelative":          28,
	"DateBetweenRelative":        29,
	"ValueTop":                   30,
	"ValueBottom":                31,
	"ValueNotBetween":            32,
	"DateInThis":                 33,
	"IsBlank":                    34,
	"IsNotBlank":                 35,
	"TextIs":                     36,
	"TextIsNot":                  37,
	"DurationEqual":              38,
	"DurationNotEqual":           39,
	"DurationGreaterThan":        40,
	"DurationGreaterThanOrEqual": 41,
	"DurationLessThan":           42,
	"DurationLessThanOrEqual":    43,
	"DurationBetween":            44,
	"DurationNotBetween":         45,
	"DurationAboveAverage":       46,
	"DurationBelowAverage":       47,
	"DurationTop":                48,
	"DurationBottom":             49,
}

func (x FormulaPredicateArchive_FormulaPredicateType) Enum() *FormulaPredicateArchive_FormulaPredicateType {
	p := new(FormulaPredicateArchive_FormulaPredicateType)
	*p = x
	return p
}
func (x FormulaPredicateArchive_FormulaPredicateType) String() string {
	return proto.EnumName(FormulaPredicateArchive_FormulaPredicateType_name, int32(x))
}
func (x *FormulaPredicateArchive_FormulaPredicateType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FormulaPredicateArchive_FormulaPredicateType_value, data, "FormulaPredicateArchive_FormulaPredicateType")
	if err != nil {
		return err
	}
	*x = FormulaPredicateArchive_FormulaPredicateType(value)
	return nil
}

type FormulaPredicateArchive_QualifierType int32

const (
	FormulaPredicateArchive_QualNone FormulaPredicateArchive_QualifierType = 0
	FormulaPredicateArchive_Days     FormulaPredicateArchive_QualifierType = 2
	FormulaPredicateArchive_Weeks    FormulaPredicateArchive_QualifierType = 3
	FormulaPredicateArchive_Months   FormulaPredicateArchive_QualifierType = 4
	FormulaPredicateArchive_Years    FormulaPredicateArchive_QualifierType = 5
	FormulaPredicateArchive_Ago      FormulaPredicateArchive_QualifierType = 6
	FormulaPredicateArchive_FromNow  FormulaPredicateArchive_QualifierType = 7
	FormulaPredicateArchive_Quarters FormulaPredicateArchive_QualifierType = 8
	FormulaPredicateArchive_Percent  FormulaPredicateArchive_QualifierType = 9
	FormulaPredicateArchive_Values   FormulaPredicateArchive_QualifierType = 10
)

var FormulaPredicateArchive_QualifierType_name = map[int32]string{
	0:  "QualNone",
	2:  "Days",
	3:  "Weeks",
	4:  "Months",
	5:  "Years",
	6:  "Ago",
	7:  "FromNow",
	8:  "Quarters",
	9:  "Percent",
	10: "Values",
}
var FormulaPredicateArchive_QualifierType_value = map[string]int32{
	"QualNone": 0,
	"Days":     2,
	"Weeks":    3,
	"Months":   4,
	"Years":    5,
	"Ago":      6,
	"FromNow":  7,
	"Quarters": 8,
	"Percent":  9,
	"Values":   10,
}

func (x FormulaPredicateArchive_QualifierType) Enum() *FormulaPredicateArchive_QualifierType {
	p := new(FormulaPredicateArchive_QualifierType)
	*p = x
	return p
}
func (x FormulaPredicateArchive_QualifierType) String() string {
	return proto.EnumName(FormulaPredicateArchive_QualifierType_name, int32(x))
}
func (x *FormulaPredicateArchive_QualifierType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FormulaPredicateArchive_QualifierType_value, data, "FormulaPredicateArchive_QualifierType")
	if err != nil {
		return err
	}
	*x = FormulaPredicateArchive_QualifierType(value)
	return nil
}

type FilterSetArchive_FilterSetType int32

const (
	FilterSetArchive_FilterSetArchiveTypeAll FilterSetArchive_FilterSetType = 0
	FilterSetArchive_FilterSetArchiveTypeAny FilterSetArchive_FilterSetType = 1
)

var FilterSetArchive_FilterSetType_name = map[int32]string{
	0: "FilterSetArchiveTypeAll",
	1: "FilterSetArchiveTypeAny",
}
var FilterSetArchive_FilterSetType_value = map[string]int32{
	"FilterSetArchiveTypeAll": 0,
	"FilterSetArchiveTypeAny": 1,
}

func (x FilterSetArchive_FilterSetType) Enum() *FilterSetArchive_FilterSetType {
	p := new(FilterSetArchive_FilterSetType)
	*p = x
	return p
}
func (x FilterSetArchive_FilterSetType) String() string {
	return proto.EnumName(FilterSetArchive_FilterSetType_name, int32(x))
}
func (x *FilterSetArchive_FilterSetType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FilterSetArchive_FilterSetType_value, data, "FilterSetArchive_FilterSetType")
	if err != nil {
		return err
	}
	*x = FilterSetArchive_FilterSetType(value)
	return nil
}

type CellID struct {
	PackedData       *uint32 `protobuf:"fixed32,1,req,name=packedData" json:"packedData,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CellID) Reset()         { *m = CellID{} }
func (m *CellID) String() string { return proto.CompactTextString(m) }
func (*CellID) ProtoMessage()    {}

func (m *CellID) GetPackedData() uint32 {
	if m != nil && m.PackedData != nil {
		return *m.PackedData
	}
	return 0
}

type TableSize struct {
	PackedData       *uint32 `protobuf:"fixed32,1,req,name=packedData" json:"packedData,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TableSize) Reset()         { *m = TableSize{} }
func (m *TableSize) String() string { return proto.CompactTextString(m) }
func (*TableSize) ProtoMessage()    {}

func (m *TableSize) GetPackedData() uint32 {
	if m != nil && m.PackedData != nil {
		return *m.PackedData
	}
	return 0
}

type CellRange struct {
	Origin           *CellID    `protobuf:"bytes,1,req,name=origin" json:"origin,omitempty"`
	Size             *TableSize `protobuf:"bytes,2,req,name=size" json:"size,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *CellRange) Reset()         { *m = CellRange{} }
func (m *CellRange) String() string { return proto.CompactTextString(m) }
func (*CellRange) ProtoMessage()    {}

func (m *CellRange) GetOrigin() *CellID {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CellRange) GetSize() *TableSize {
	if m != nil {
		return m.Size
	}
	return nil
}

type TableSelection struct {
	CellRange              *CellRange            `protobuf:"bytes,1,req,name=cellRange" json:"cellRange,omitempty"`
	ExtendedCellRange      *CellRange            `protobuf:"bytes,2,req,name=extendedCellRange" json:"extendedCellRange,omitempty"`
	ExtendedCellRangeValid *bool                 `protobuf:"varint,3,req,name=extendedCellRangeValid" json:"extendedCellRangeValid,omitempty"`
	SelectionType          *SelectionTypeArchive `protobuf:"varint,4,req,name=selection_type,enum=SelectionTypeArchive" json:"selection_type,omitempty"`
	XXX_unrecognized       []byte                `json:"-"`
}

func (m *TableSelection) Reset()         { *m = TableSelection{} }
func (m *TableSelection) String() string { return proto.CompactTextString(m) }
func (*TableSelection) ProtoMessage()    {}

func (m *TableSelection) GetCellRange() *CellRange {
	if m != nil {
		return m.CellRange
	}
	return nil
}

func (m *TableSelection) GetExtendedCellRange() *CellRange {
	if m != nil {
		return m.ExtendedCellRange
	}
	return nil
}

func (m *TableSelection) GetExtendedCellRangeValid() bool {
	if m != nil && m.ExtendedCellRangeValid != nil {
		return *m.ExtendedCellRangeValid
	}
	return false
}

func (m *TableSelection) GetSelectionType() SelectionTypeArchive {
	if m != nil && m.SelectionType != nil {
		return *m.SelectionType
	}
	return SelectionTypeArchive_cellSelectionType
}

type TileRowInfo struct {
	StorageVersion    *uint32 `protobuf:"varint,5,opt,name=storage_version" json:"storage_version,omitempty"`
	TileRowIndex      *uint32 `protobuf:"varint,1,req,name=tileRowIndex" json:"tileRowIndex,omitempty"`
	CellCount         *uint32 `protobuf:"varint,2,req,name=cellCount" json:"cellCount,omitempty"`
	CellStorageBuffer []byte  `protobuf:"bytes,3,req,name=cellStorageBuffer" json:"cellStorageBuffer,omitempty"`
	CellOffsets       []byte  `protobuf:"bytes,4,req,name=cellOffsets" json:"cellOffsets,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *TileRowInfo) Reset()         { *m = TileRowInfo{} }
func (m *TileRowInfo) String() string { return proto.CompactTextString(m) }
func (*TileRowInfo) ProtoMessage()    {}

func (m *TileRowInfo) GetStorageVersion() uint32 {
	if m != nil && m.StorageVersion != nil {
		return *m.StorageVersion
	}
	return 0
}

func (m *TileRowInfo) GetTileRowIndex() uint32 {
	if m != nil && m.TileRowIndex != nil {
		return *m.TileRowIndex
	}
	return 0
}

func (m *TileRowInfo) GetCellCount() uint32 {
	if m != nil && m.CellCount != nil {
		return *m.CellCount
	}
	return 0
}

func (m *TileRowInfo) GetCellStorageBuffer() []byte {
	if m != nil {
		return m.CellStorageBuffer
	}
	return nil
}

func (m *TileRowInfo) GetCellOffsets() []byte {
	if m != nil {
		return m.CellOffsets
	}
	return nil
}

type Tile struct {
	MaxColumn        *uint32        `protobuf:"varint,1,req,name=maxColumn" json:"maxColumn,omitempty"`
	MaxRow           *uint32        `protobuf:"varint,2,req,name=maxRow" json:"maxRow,omitempty"`
	NumCells         *uint32        `protobuf:"varint,3,req,name=numCells" json:"numCells,omitempty"`
	Numrows          *uint32        `protobuf:"varint,4,req,name=numrows" json:"numrows,omitempty"`
	StorageVersion   *uint32        `protobuf:"varint,6,opt,name=storage_version" json:"storage_version,omitempty"`
	RowInfos         []*TileRowInfo `protobuf:"bytes,5,rep,name=rowInfos" json:"rowInfos,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Tile) Reset()         { *m = Tile{} }
func (m *Tile) String() string { return proto.CompactTextString(m) }
func (*Tile) ProtoMessage()    {}

func (m *Tile) GetMaxColumn() uint32 {
	if m != nil && m.MaxColumn != nil {
		return *m.MaxColumn
	}
	return 0
}

func (m *Tile) GetMaxRow() uint32 {
	if m != nil && m.MaxRow != nil {
		return *m.MaxRow
	}
	return 0
}

func (m *Tile) GetNumCells() uint32 {
	if m != nil && m.NumCells != nil {
		return *m.NumCells
	}
	return 0
}

func (m *Tile) GetNumrows() uint32 {
	if m != nil && m.Numrows != nil {
		return *m.Numrows
	}
	return 0
}

func (m *Tile) GetStorageVersion() uint32 {
	if m != nil && m.StorageVersion != nil {
		return *m.StorageVersion
	}
	return 0
}

func (m *Tile) GetRowInfos() []*TileRowInfo {
	if m != nil {
		return m.RowInfos
	}
	return nil
}

type TileStorage struct {
	Tiles            []*TileStorage_Tile `protobuf:"bytes,1,rep,name=tiles" json:"tiles,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *TileStorage) Reset()         { *m = TileStorage{} }
func (m *TileStorage) String() string { return proto.CompactTextString(m) }
func (*TileStorage) ProtoMessage()    {}

func (m *TileStorage) GetTiles() []*TileStorage_Tile {
	if m != nil {
		return m.Tiles
	}
	return nil
}

type TileStorage_Tile struct {
	Tileid           *uint32        `protobuf:"varint,1,req,name=tileid" json:"tileid,omitempty"`
	Tile             *TSP.Reference `protobuf:"bytes,2,req,name=tile" json:"tile,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *TileStorage_Tile) Reset()         { *m = TileStorage_Tile{} }
func (m *TileStorage_Tile) String() string { return proto.CompactTextString(m) }
func (*TileStorage_Tile) ProtoMessage()    {}

func (m *TileStorage_Tile) GetTileid() uint32 {
	if m != nil && m.Tileid != nil {
		return *m.Tileid
	}
	return 0
}

func (m *TileStorage_Tile) GetTile() *TSP.Reference {
	if m != nil {
		return m.Tile
	}
	return nil
}

type PopUpMenuModel struct {
	Item             []*PopUpMenuModel_CellValue `protobuf:"bytes,1,rep,name=item" json:"item,omitempty"`
	TsceItem         []*TSCE.CellValueArchive    `protobuf:"bytes,2,rep,name=tsce_item" json:"tsce_item,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *PopUpMenuModel) Reset()         { *m = PopUpMenuModel{} }
func (m *PopUpMenuModel) String() string { return proto.CompactTextString(m) }
func (*PopUpMenuModel) ProtoMessage()    {}

func (m *PopUpMenuModel) GetItem() []*PopUpMenuModel_CellValue {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *PopUpMenuModel) GetTsceItem() []*TSCE.CellValueArchive {
	if m != nil {
		return m.TsceItem
	}
	return nil
}

type PopUpMenuModel_CellValue struct {
	CellValueType    *PopUpMenuModel_CellValueType `protobuf:"varint,1,req,name=cell_value_type,enum=PopUpMenuModel_CellValueType" json:"cell_value_type,omitempty"`
	BooleanValue     *TSCE.BooleanCellValueArchive `protobuf:"bytes,2,opt,name=boolean_value" json:"boolean_value,omitempty"`
	DateValue        *TSCE.DateCellValueArchive    `protobuf:"bytes,3,opt,name=date_value" json:"date_value,omitempty"`
	NumberValue      *TSCE.NumberCellValueArchive  `protobuf:"bytes,4,opt,name=number_value" json:"number_value,omitempty"`
	StringValue      *TSCE.StringCellValueArchive  `protobuf:"bytes,5,opt,name=string_value" json:"string_value,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *PopUpMenuModel_CellValue) Reset()         { *m = PopUpMenuModel_CellValue{} }
func (m *PopUpMenuModel_CellValue) String() string { return proto.CompactTextString(m) }
func (*PopUpMenuModel_CellValue) ProtoMessage()    {}

func (m *PopUpMenuModel_CellValue) GetCellValueType() PopUpMenuModel_CellValueType {
	if m != nil && m.CellValueType != nil {
		return *m.CellValueType
	}
	return PopUpMenuModel_NIL_TYPE
}

func (m *PopUpMenuModel_CellValue) GetBooleanValue() *TSCE.BooleanCellValueArchive {
	if m != nil {
		return m.BooleanValue
	}
	return nil
}

func (m *PopUpMenuModel_CellValue) GetDateValue() *TSCE.DateCellValueArchive {
	if m != nil {
		return m.DateValue
	}
	return nil
}

func (m *PopUpMenuModel_CellValue) GetNumberValue() *TSCE.NumberCellValueArchive {
	if m != nil {
		return m.NumberValue
	}
	return nil
}

func (m *PopUpMenuModel_CellValue) GetStringValue() *TSCE.StringCellValueArchive {
	if m != nil {
		return m.StringValue
	}
	return nil
}

type TableDataList struct {
	ListType         *TableDataList_ListType    `protobuf:"varint,1,req,name=listType,enum=TableDataList_ListType" json:"listType,omitempty"`
	NextListID       *uint32                    `protobuf:"varint,2,req,name=nextListID" json:"nextListID,omitempty"`
	Entries          []*TableDataList_ListEntry `protobuf:"bytes,3,rep,name=entries" json:"entries,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *TableDataList) Reset()         { *m = TableDataList{} }
func (m *TableDataList) String() string { return proto.CompactTextString(m) }
func (*TableDataList) ProtoMessage()    {}

func (m *TableDataList) GetListType() TableDataList_ListType {
	if m != nil && m.ListType != nil {
		return *m.ListType
	}
	return TableDataList_STRING
}

func (m *TableDataList) GetNextListID() uint32 {
	if m != nil && m.NextListID != nil {
		return *m.NextListID
	}
	return 0
}

func (m *TableDataList) GetEntries() []*TableDataList_ListEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type TableDataList_ListEntry struct {
	Key              *uint32                  `protobuf:"varint,1,req,name=key" json:"key,omitempty"`
	Refcount         *uint32                  `protobuf:"varint,2,req,name=refcount" json:"refcount,omitempty"`
	String_          *string                  `protobuf:"bytes,3,opt,name=string" json:"string,omitempty"`
	Reference        *TSP.Reference           `protobuf:"bytes,4,opt,name=reference" json:"reference,omitempty"`
	Formula          *TSCE.FormulaArchive     `protobuf:"bytes,5,opt,name=formula" json:"formula,omitempty"`
	Format           *TSK.FormatStructArchive `protobuf:"bytes,6,opt,name=format" json:"format,omitempty"`
	Region           *CellRange               `protobuf:"bytes,7,opt,name=region" json:"region,omitempty"`
	CustomFormat     *TSK.CustomFormatArchive `protobuf:"bytes,8,opt,name=custom_format" json:"custom_format,omitempty"`
	RichTextPayload  *TSP.Reference           `protobuf:"bytes,9,opt,name=richTextPayload" json:"richTextPayload,omitempty"`
	CommentStorage   *TSP.Reference           `protobuf:"bytes,10,opt,name=comment_storage" json:"comment_storage,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *TableDataList_ListEntry) Reset()         { *m = TableDataList_ListEntry{} }
func (m *TableDataList_ListEntry) String() string { return proto.CompactTextString(m) }
func (*TableDataList_ListEntry) ProtoMessage()    {}

func (m *TableDataList_ListEntry) GetKey() uint32 {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return 0
}

func (m *TableDataList_ListEntry) GetRefcount() uint32 {
	if m != nil && m.Refcount != nil {
		return *m.Refcount
	}
	return 0
}

func (m *TableDataList_ListEntry) GetString_() string {
	if m != nil && m.String_ != nil {
		return *m.String_
	}
	return ""
}

func (m *TableDataList_ListEntry) GetReference() *TSP.Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *TableDataList_ListEntry) GetFormula() *TSCE.FormulaArchive {
	if m != nil {
		return m.Formula
	}
	return nil
}

func (m *TableDataList_ListEntry) GetFormat() *TSK.FormatStructArchive {
	if m != nil {
		return m.Format
	}
	return nil
}

func (m *TableDataList_ListEntry) GetRegion() *CellRange {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *TableDataList_ListEntry) GetCustomFormat() *TSK.CustomFormatArchive {
	if m != nil {
		return m.CustomFormat
	}
	return nil
}

func (m *TableDataList_ListEntry) GetRichTextPayload() *TSP.Reference {
	if m != nil {
		return m.RichTextPayload
	}
	return nil
}

func (m *TableDataList_ListEntry) GetCommentStorage() *TSP.Reference {
	if m != nil {
		return m.CommentStorage
	}
	return nil
}

type TableRBTree struct {
	Nodes            []*TableRBTree_Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *TableRBTree) Reset()         { *m = TableRBTree{} }
func (m *TableRBTree) String() string { return proto.CompactTextString(m) }
func (*TableRBTree) ProtoMessage()    {}

func (m *TableRBTree) GetNodes() []*TableRBTree_Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type TableRBTree_Node struct {
	Key              *uint32 `protobuf:"varint,1,req,name=key" json:"key,omitempty"`
	Value            *uint32 `protobuf:"varint,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TableRBTree_Node) Reset()         { *m = TableRBTree_Node{} }
func (m *TableRBTree_Node) String() string { return proto.CompactTextString(m) }
func (*TableRBTree_Node) ProtoMessage()    {}

func (m *TableRBTree_Node) GetKey() uint32 {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return 0
}

func (m *TableRBTree_Node) GetValue() uint32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

type HeaderStorageBucket struct {
	BucketHashFunction *uint32                       `protobuf:"varint,1,req,name=bucketHashFunction" json:"bucketHashFunction,omitempty"`
	Headers            []*HeaderStorageBucket_Header `protobuf:"bytes,2,rep,name=headers" json:"headers,omitempty"`
	XXX_unrecognized   []byte                        `json:"-"`
}

func (m *HeaderStorageBucket) Reset()         { *m = HeaderStorageBucket{} }
func (m *HeaderStorageBucket) String() string { return proto.CompactTextString(m) }
func (*HeaderStorageBucket) ProtoMessage()    {}

func (m *HeaderStorageBucket) GetBucketHashFunction() uint32 {
	if m != nil && m.BucketHashFunction != nil {
		return *m.BucketHashFunction
	}
	return 0
}

func (m *HeaderStorageBucket) GetHeaders() []*HeaderStorageBucket_Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

type HeaderStorageBucket_Header struct {
	Index            *uint32        `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
	Size             *float32       `protobuf:"fixed32,2,req,name=size" json:"size,omitempty"`
	HidingState      *uint32        `protobuf:"varint,3,req,name=hidingState" json:"hidingState,omitempty"`
	NumberOfCells    *uint32        `protobuf:"varint,4,req,name=numberOfCells" json:"numberOfCells,omitempty"`
	CellStyle        *TSP.Reference `protobuf:"bytes,5,opt,name=cell_style" json:"cell_style,omitempty"`
	TextStyle        *TSP.Reference `protobuf:"bytes,6,opt,name=text_style" json:"text_style,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *HeaderStorageBucket_Header) Reset()         { *m = HeaderStorageBucket_Header{} }
func (m *HeaderStorageBucket_Header) String() string { return proto.CompactTextString(m) }
func (*HeaderStorageBucket_Header) ProtoMessage()    {}

func (m *HeaderStorageBucket_Header) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *HeaderStorageBucket_Header) GetSize() float32 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

func (m *HeaderStorageBucket_Header) GetHidingState() uint32 {
	if m != nil && m.HidingState != nil {
		return *m.HidingState
	}
	return 0
}

func (m *HeaderStorageBucket_Header) GetNumberOfCells() uint32 {
	if m != nil && m.NumberOfCells != nil {
		return *m.NumberOfCells
	}
	return 0
}

func (m *HeaderStorageBucket_Header) GetCellStyle() *TSP.Reference {
	if m != nil {
		return m.CellStyle
	}
	return nil
}

func (m *HeaderStorageBucket_Header) GetTextStyle() *TSP.Reference {
	if m != nil {
		return m.TextStyle
	}
	return nil
}

type HeaderStorage struct {
	BucketHashFunction *uint32          `protobuf:"varint,1,req,name=bucketHashFunction" json:"bucketHashFunction,omitempty"`
	Buckets            []*TSP.Reference `protobuf:"bytes,2,rep,name=buckets" json:"buckets,omitempty"`
	XXX_unrecognized   []byte           `json:"-"`
}

func (m *HeaderStorage) Reset()         { *m = HeaderStorage{} }
func (m *HeaderStorage) String() string { return proto.CompactTextString(m) }
func (*HeaderStorage) ProtoMessage()    {}

func (m *HeaderStorage) GetBucketHashFunction() uint32 {
	if m != nil && m.BucketHashFunction != nil {
		return *m.BucketHashFunction
	}
	return 0
}

func (m *HeaderStorage) GetBuckets() []*TSP.Reference {
	if m != nil {
		return m.Buckets
	}
	return nil
}

type DataStore struct {
	RowHeaders                    *HeaderStorage `protobuf:"bytes,1,req,name=rowHeaders" json:"rowHeaders,omitempty"`
	ColumnHeaders                 *TSP.Reference `protobuf:"bytes,2,req,name=columnHeaders" json:"columnHeaders,omitempty"`
	Tiles                         *TileStorage   `protobuf:"bytes,3,req,name=tiles" json:"tiles,omitempty"`
	StringTable                   *TSP.Reference `protobuf:"bytes,4,req,name=stringTable" json:"stringTable,omitempty"`
	StyleTable                    *TSP.Reference `protobuf:"bytes,5,req,name=styleTable" json:"styleTable,omitempty"`
	FormulaTable                  *TSP.Reference `protobuf:"bytes,6,req,name=formulaTable" json:"formulaTable,omitempty"`
	FormulaErrorTable             *TSP.Reference `protobuf:"bytes,12,opt,name=formulaErrorTable" json:"formulaErrorTable,omitempty"`
	FormatTable                   *TSP.Reference `protobuf:"bytes,11,req,name=formatTable" json:"formatTable,omitempty"`
	MultipleChoiceListFormatTable *TSP.Reference `protobuf:"bytes,16,opt,name=multipleChoiceListFormatTable" json:"multipleChoiceListFormatTable,omitempty"`
	MergeRegionMap                *TSP.Reference `protobuf:"bytes,13,opt,name=merge_region_map" json:"merge_region_map,omitempty"`
	CustomFormatTable             *TSP.Reference `protobuf:"bytes,15,opt,name=customFormatTable" json:"customFormatTable,omitempty"`
	NextRowStripID                *uint32        `protobuf:"varint,7,req,name=nextRowStripID" json:"nextRowStripID,omitempty"`
	NextColumnStripID             *uint32        `protobuf:"varint,8,req,name=nextColumnStripID" json:"nextColumnStripID,omitempty"`
	RowTileTree                   *TableRBTree   `protobuf:"bytes,9,req,name=rowTileTree" json:"rowTileTree,omitempty"`
	ColumnTileTree                *TableRBTree   `protobuf:"bytes,10,req,name=columnTileTree" json:"columnTileTree,omitempty"`
	StorageVersion                *uint32        `protobuf:"varint,14,opt,name=storage_version" json:"storage_version,omitempty"`
	RichTextPayloadTable          *TSP.Reference `protobuf:"bytes,17,opt,name=richTextPayloadTable" json:"richTextPayloadTable,omitempty"`
	Conditionalstyletable         *TSP.Reference `protobuf:"bytes,18,opt,name=conditionalstyletable" json:"conditionalstyletable,omitempty"`
	CommentStorageTable           *TSP.Reference `protobuf:"bytes,19,opt,name=commentStorageTable" json:"commentStorageTable,omitempty"`
	XXX_unrecognized              []byte         `json:"-"`
}

func (m *DataStore) Reset()         { *m = DataStore{} }
func (m *DataStore) String() string { return proto.CompactTextString(m) }
func (*DataStore) ProtoMessage()    {}

func (m *DataStore) GetRowHeaders() *HeaderStorage {
	if m != nil {
		return m.RowHeaders
	}
	return nil
}

func (m *DataStore) GetColumnHeaders() *TSP.Reference {
	if m != nil {
		return m.ColumnHeaders
	}
	return nil
}

func (m *DataStore) GetTiles() *TileStorage {
	if m != nil {
		return m.Tiles
	}
	return nil
}

func (m *DataStore) GetStringTable() *TSP.Reference {
	if m != nil {
		return m.StringTable
	}
	return nil
}

func (m *DataStore) GetStyleTable() *TSP.Reference {
	if m != nil {
		return m.StyleTable
	}
	return nil
}

func (m *DataStore) GetFormulaTable() *TSP.Reference {
	if m != nil {
		return m.FormulaTable
	}
	return nil
}

func (m *DataStore) GetFormulaErrorTable() *TSP.Reference {
	if m != nil {
		return m.FormulaErrorTable
	}
	return nil
}

func (m *DataStore) GetFormatTable() *TSP.Reference {
	if m != nil {
		return m.FormatTable
	}
	return nil
}

func (m *DataStore) GetMultipleChoiceListFormatTable() *TSP.Reference {
	if m != nil {
		return m.MultipleChoiceListFormatTable
	}
	return nil
}

func (m *DataStore) GetMergeRegionMap() *TSP.Reference {
	if m != nil {
		return m.MergeRegionMap
	}
	return nil
}

func (m *DataStore) GetCustomFormatTable() *TSP.Reference {
	if m != nil {
		return m.CustomFormatTable
	}
	return nil
}

func (m *DataStore) GetNextRowStripID() uint32 {
	if m != nil && m.NextRowStripID != nil {
		return *m.NextRowStripID
	}
	return 0
}

func (m *DataStore) GetNextColumnStripID() uint32 {
	if m != nil && m.NextColumnStripID != nil {
		return *m.NextColumnStripID
	}
	return 0
}

func (m *DataStore) GetRowTileTree() *TableRBTree {
	if m != nil {
		return m.RowTileTree
	}
	return nil
}

func (m *DataStore) GetColumnTileTree() *TableRBTree {
	if m != nil {
		return m.ColumnTileTree
	}
	return nil
}

func (m *DataStore) GetStorageVersion() uint32 {
	if m != nil && m.StorageVersion != nil {
		return *m.StorageVersion
	}
	return 0
}

func (m *DataStore) GetRichTextPayloadTable() *TSP.Reference {
	if m != nil {
		return m.RichTextPayloadTable
	}
	return nil
}

func (m *DataStore) GetConditionalstyletable() *TSP.Reference {
	if m != nil {
		return m.Conditionalstyletable
	}
	return nil
}

func (m *DataStore) GetCommentStorageTable() *TSP.Reference {
	if m != nil {
		return m.CommentStorageTable
	}
	return nil
}

type TableInfoArchive struct {
	Super            *TSD.DrawableArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	TableModel       *TSP.Reference       `protobuf:"bytes,2,req,name=tableModel" json:"tableModel,omitempty"`
	EditingState     *TSP.Reference       `protobuf:"bytes,3,opt,name=editingState" json:"editingState,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *TableInfoArchive) Reset()         { *m = TableInfoArchive{} }
func (m *TableInfoArchive) String() string { return proto.CompactTextString(m) }
func (*TableInfoArchive) ProtoMessage()    {}

func (m *TableInfoArchive) GetSuper() *TSD.DrawableArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *TableInfoArchive) GetTableModel() *TSP.Reference {
	if m != nil {
		return m.TableModel
	}
	return nil
}

func (m *TableInfoArchive) GetEditingState() *TSP.Reference {
	if m != nil {
		return m.EditingState
	}
	return nil
}

type EditingStateArchive struct {
	EditingStorage                         *TSP.Reference        `protobuf:"bytes,1,opt,name=editingStorage" json:"editingStorage,omitempty"`
	EditingCell                            *Cell                 `protobuf:"bytes,2,req,name=editingCell" json:"editingCell,omitempty"`
	Selection                              *SelectionArchive     `protobuf:"bytes,3,opt,name=selection" json:"selection,omitempty"`
	Lasteditingcellid                      *CellID               `protobuf:"bytes,4,opt,name=lasteditingcellid" json:"lasteditingcellid,omitempty"`
	Editingcellid                          *CellID               `protobuf:"bytes,5,opt,name=editingcellid" json:"editingcellid,omitempty"`
	DeprecatedSetupTextUndoRedoTransaction *TSWP.UndoTransaction `protobuf:"bytes,6,opt,name=deprecated_setup_textUndoRedoTransaction" json:"deprecated_setup_textUndoRedoTransaction,omitempty"`
	CellWasEditedInCurrentSession          *bool                 `protobuf:"varint,7,opt,name=cell_was_edited_in_current_session" json:"cell_was_edited_in_current_session,omitempty"`
	XXX_unrecognized                       []byte                `json:"-"`
}

func (m *EditingStateArchive) Reset()         { *m = EditingStateArchive{} }
func (m *EditingStateArchive) String() string { return proto.CompactTextString(m) }
func (*EditingStateArchive) ProtoMessage()    {}

func (m *EditingStateArchive) GetEditingStorage() *TSP.Reference {
	if m != nil {
		return m.EditingStorage
	}
	return nil
}

func (m *EditingStateArchive) GetEditingCell() *Cell {
	if m != nil {
		return m.EditingCell
	}
	return nil
}

func (m *EditingStateArchive) GetSelection() *SelectionArchive {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *EditingStateArchive) GetLasteditingcellid() *CellID {
	if m != nil {
		return m.Lasteditingcellid
	}
	return nil
}

func (m *EditingStateArchive) GetEditingcellid() *CellID {
	if m != nil {
		return m.Editingcellid
	}
	return nil
}

func (m *EditingStateArchive) GetDeprecatedSetupTextUndoRedoTransaction() *TSWP.UndoTransaction {
	if m != nil {
		return m.DeprecatedSetupTextUndoRedoTransaction
	}
	return nil
}

func (m *EditingStateArchive) GetCellWasEditedInCurrentSession() bool {
	if m != nil && m.CellWasEditedInCurrentSession != nil {
		return *m.CellWasEditedInCurrentSession
	}
	return false
}

type WPTableInfoArchive struct {
	Super            *TableInfoArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Storage          *TSP.Reference    `protobuf:"bytes,2,opt,name=storage" json:"storage,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *WPTableInfoArchive) Reset()         { *m = WPTableInfoArchive{} }
func (m *WPTableInfoArchive) String() string { return proto.CompactTextString(m) }
func (*WPTableInfoArchive) ProtoMessage()    {}

func (m *WPTableInfoArchive) GetSuper() *TableInfoArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *WPTableInfoArchive) GetStorage() *TSP.Reference {
	if m != nil {
		return m.Storage
	}
	return nil
}

type TableStyleNetworkArchive struct {
	TableStyle            *TSP.Reference `protobuf:"bytes,9,req,name=table_style" json:"table_style,omitempty"`
	BodyTextStyle         *TSP.Reference `protobuf:"bytes,1,req,name=body_text_style" json:"body_text_style,omitempty"`
	HeaderRowTextStyle    *TSP.Reference `protobuf:"bytes,2,req,name=header_row_text_style" json:"header_row_text_style,omitempty"`
	HeaderColumnTextStyle *TSP.Reference `protobuf:"bytes,3,req,name=header_column_text_style" json:"header_column_text_style,omitempty"`
	FooterRowTextStyle    *TSP.Reference `protobuf:"bytes,4,req,name=footer_row_text_style" json:"footer_row_text_style,omitempty"`
	BodyCellStyle         *TSP.Reference `protobuf:"bytes,5,req,name=body_cell_style" json:"body_cell_style,omitempty"`
	HeaderRowStyle        *TSP.Reference `protobuf:"bytes,6,req,name=header_row_style" json:"header_row_style,omitempty"`
	HeaderColumnStyle     *TSP.Reference `protobuf:"bytes,7,req,name=header_column_style" json:"header_column_style,omitempty"`
	FooterRowStyle        *TSP.Reference `protobuf:"bytes,8,req,name=footer_row_style" json:"footer_row_style,omitempty"`
	TableNameStyle        *TSP.Reference `protobuf:"bytes,10,opt,name=table_name_style" json:"table_name_style,omitempty"`
	TableNameShapeStyle   *TSP.Reference `protobuf:"bytes,11,opt,name=table_name_shape_style" json:"table_name_shape_style,omitempty"`
	PresetIndex           *uint32        `protobuf:"varint,12,opt,name=preset_index" json:"preset_index,omitempty"`
	XXX_unrecognized      []byte         `json:"-"`
}

func (m *TableStyleNetworkArchive) Reset()         { *m = TableStyleNetworkArchive{} }
func (m *TableStyleNetworkArchive) String() string { return proto.CompactTextString(m) }
func (*TableStyleNetworkArchive) ProtoMessage()    {}

func (m *TableStyleNetworkArchive) GetTableStyle() *TSP.Reference {
	if m != nil {
		return m.TableStyle
	}
	return nil
}

func (m *TableStyleNetworkArchive) GetBodyTextStyle() *TSP.Reference {
	if m != nil {
		return m.BodyTextStyle
	}
	return nil
}

func (m *TableStyleNetworkArchive) GetHeaderRowTextStyle() *TSP.Reference {
	if m != nil {
		return m.HeaderRowTextStyle
	}
	return nil
}

func (m *TableStyleNetworkArchive) GetHeaderColumnTextStyle() *TSP.Reference {
	if m != nil {
		return m.HeaderColumnTextStyle
	}
	return nil
}

func (m *TableStyleNetworkArchive) GetFooterRowTextStyle() *TSP.Reference {
	if m != nil {
		return m.FooterRowTextStyle
	}
	return nil
}

func (m *TableStyleNetworkArchive) GetBodyCellStyle() *TSP.Reference {
	if m != nil {
		return m.BodyCellStyle
	}
	return nil
}

func (m *TableStyleNetworkArchive) GetHeaderRowStyle() *TSP.Reference {
	if m != nil {
		return m.HeaderRowStyle
	}
	return nil
}

func (m *TableStyleNetworkArchive) GetHeaderColumnStyle() *TSP.Reference {
	if m != nil {
		return m.HeaderColumnStyle
	}
	return nil
}

func (m *TableStyleNetworkArchive) GetFooterRowStyle() *TSP.Reference {
	if m != nil {
		return m.FooterRowStyle
	}
	return nil
}

func (m *TableStyleNetworkArchive) GetTableNameStyle() *TSP.Reference {
	if m != nil {
		return m.TableNameStyle
	}
	return nil
}

func (m *TableStyleNetworkArchive) GetTableNameShapeStyle() *TSP.Reference {
	if m != nil {
		return m.TableNameShapeStyle
	}
	return nil
}

func (m *TableStyleNetworkArchive) GetPresetIndex() uint32 {
	if m != nil && m.PresetIndex != nil {
		return *m.PresetIndex
	}
	return 0
}

type TableModelArchive struct {
	TableId                           *string             `protobuf:"bytes,1,req,name=table_id" json:"table_id,omitempty"`
	FromTableId                       *string             `protobuf:"bytes,43,opt,name=from_table_id" json:"from_table_id,omitempty"`
	TableStyle                        *TSP.Reference      `protobuf:"bytes,3,req,name=table_style" json:"table_style,omitempty"`
	BodyTextStyle                     *TSP.Reference      `protobuf:"bytes,24,req,name=body_text_style" json:"body_text_style,omitempty"`
	HeaderRowTextStyle                *TSP.Reference      `protobuf:"bytes,25,req,name=header_row_text_style" json:"header_row_text_style,omitempty"`
	HeaderColumnTextStyle             *TSP.Reference      `protobuf:"bytes,26,req,name=header_column_text_style" json:"header_column_text_style,omitempty"`
	FooterRowTextStyle                *TSP.Reference      `protobuf:"bytes,27,req,name=footer_row_text_style" json:"footer_row_text_style,omitempty"`
	BodyCellStyle                     *TSP.Reference      `protobuf:"bytes,18,req,name=body_cell_style" json:"body_cell_style,omitempty"`
	HeaderRowStyle                    *TSP.Reference      `protobuf:"bytes,19,req,name=header_row_style" json:"header_row_style,omitempty"`
	HeaderColumnStyle                 *TSP.Reference      `protobuf:"bytes,20,req,name=header_column_style" json:"header_column_style,omitempty"`
	FooterRowStyle                    *TSP.Reference      `protobuf:"bytes,21,req,name=footer_row_style" json:"footer_row_style,omitempty"`
	TableNameStyle                    *TSP.Reference      `protobuf:"bytes,30,opt,name=table_name_style" json:"table_name_style,omitempty"`
	TableNameShapeStyle               *TSP.Reference      `protobuf:"bytes,36,opt,name=table_name_shape_style" json:"table_name_shape_style,omitempty"`
	DataStore                         *DataStore          `protobuf:"bytes,4,req,name=data_store" json:"data_store,omitempty"`
	Provider                          *TSP.Reference      `protobuf:"bytes,5,opt,name=provider" json:"provider,omitempty"`
	NumberOfRows                      *uint32             `protobuf:"varint,6,req,name=number_of_rows" json:"number_of_rows,omitempty"`
	NumberOfColumns                   *uint32             `protobuf:"varint,7,req,name=number_of_columns" json:"number_of_columns,omitempty"`
	TableName                         *string             `protobuf:"bytes,8,req,name=table_name" json:"table_name,omitempty"`
	TableNameEnabled                  *bool               `protobuf:"varint,22,opt,name=table_name_enabled" json:"table_name_enabled,omitempty"`
	TableNameHeight                   *float64            `protobuf:"fixed64,33,opt,name=table_name_height" json:"table_name_height,omitempty"`
	TableNameBorderEnabled            *bool               `protobuf:"varint,37,opt,name=table_name_border_enabled" json:"table_name_border_enabled,omitempty"`
	NumberOfHeaderRows                *uint32             `protobuf:"varint,9,opt,name=number_of_header_rows" json:"number_of_header_rows,omitempty"`
	NumberOfHeaderColumns             *uint32             `protobuf:"varint,10,opt,name=number_of_header_columns" json:"number_of_header_columns,omitempty"`
	NumberOfFooterRows                *uint32             `protobuf:"varint,11,opt,name=number_of_footer_rows" json:"number_of_footer_rows,omitempty"`
	HeaderRowsFrozen                  *bool               `protobuf:"varint,12,opt,name=header_rows_frozen" json:"header_rows_frozen,omitempty"`
	HeaderColumnsFrozen               *bool               `protobuf:"varint,13,opt,name=header_columns_frozen" json:"header_columns_frozen,omitempty"`
	NumberOfHiddenRows                *uint32             `protobuf:"varint,14,opt,name=number_of_hidden_rows" json:"number_of_hidden_rows,omitempty"`
	NumberOfHiddenColumns             *uint32             `protobuf:"varint,15,opt,name=number_of_hidden_columns" json:"number_of_hidden_columns,omitempty"`
	NumberOfUserHiddenRows            *uint32             `protobuf:"varint,41,opt,name=number_of_user_hidden_rows" json:"number_of_user_hidden_rows,omitempty"`
	NumberOfUserHiddenColumns         *uint32             `protobuf:"varint,42,opt,name=number_of_user_hidden_columns" json:"number_of_user_hidden_columns,omitempty"`
	NumberOfFilteredRows              *uint32             `protobuf:"varint,40,opt,name=number_of_filtered_rows" json:"number_of_filtered_rows,omitempty"`
	DefaultRowHeight                  *float64            `protobuf:"fixed64,16,req,name=default_row_height" json:"default_row_height,omitempty"`
	DefaultColumnWidth                *float64            `protobuf:"fixed64,17,req,name=default_column_width" json:"default_column_width,omitempty"`
	OriginOffset                      *CellID             `protobuf:"bytes,23,opt,name=origin_offset" json:"origin_offset,omitempty"`
	PresetIndex                       *uint32             `protobuf:"varint,28,opt,name=preset_index" json:"preset_index,omitempty"`
	RepeatingHeaderRowsEnabled        *bool               `protobuf:"varint,29,opt,name=repeating_header_rows_enabled" json:"repeating_header_rows_enabled,omitempty"`
	RepeatingHeaderColumnsEnabled     *bool               `protobuf:"varint,32,opt,name=repeating_header_columns_enabled" json:"repeating_header_columns_enabled,omitempty"`
	StyleApplyClearsAll               *bool               `protobuf:"varint,31,opt,name=style_apply_clears_all" json:"style_apply_clears_all,omitempty"`
	HiddenStateFormulaOwnerForColumns *TSP.Reference      `protobuf:"bytes,34,opt,name=hidden_state_formula_owner_for_columns" json:"hidden_state_formula_owner_for_columns,omitempty"`
	HiddenStateFormulaOwnerForRows    *TSP.Reference      `protobuf:"bytes,35,opt,name=hidden_state_formula_owner_for_rows" json:"hidden_state_formula_owner_for_rows,omitempty"`
	FilterSet                         *TSP.Reference      `protobuf:"bytes,38,opt,name=filter_set" json:"filter_set,omitempty"`
	ConditionalStyleFormulaOwnerId    *TSCE.CFUUIDArchive `protobuf:"bytes,39,opt,name=conditional_style_formula_owner_id" json:"conditional_style_formula_owner_id,omitempty"`
	XXX_unrecognized                  []byte              `json:"-"`
}

func (m *TableModelArchive) Reset()         { *m = TableModelArchive{} }
func (m *TableModelArchive) String() string { return proto.CompactTextString(m) }
func (*TableModelArchive) ProtoMessage()    {}

func (m *TableModelArchive) GetTableId() string {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return ""
}

func (m *TableModelArchive) GetFromTableId() string {
	if m != nil && m.FromTableId != nil {
		return *m.FromTableId
	}
	return ""
}

func (m *TableModelArchive) GetTableStyle() *TSP.Reference {
	if m != nil {
		return m.TableStyle
	}
	return nil
}

func (m *TableModelArchive) GetBodyTextStyle() *TSP.Reference {
	if m != nil {
		return m.BodyTextStyle
	}
	return nil
}

func (m *TableModelArchive) GetHeaderRowTextStyle() *TSP.Reference {
	if m != nil {
		return m.HeaderRowTextStyle
	}
	return nil
}

func (m *TableModelArchive) GetHeaderColumnTextStyle() *TSP.Reference {
	if m != nil {
		return m.HeaderColumnTextStyle
	}
	return nil
}

func (m *TableModelArchive) GetFooterRowTextStyle() *TSP.Reference {
	if m != nil {
		return m.FooterRowTextStyle
	}
	return nil
}

func (m *TableModelArchive) GetBodyCellStyle() *TSP.Reference {
	if m != nil {
		return m.BodyCellStyle
	}
	return nil
}

func (m *TableModelArchive) GetHeaderRowStyle() *TSP.Reference {
	if m != nil {
		return m.HeaderRowStyle
	}
	return nil
}

func (m *TableModelArchive) GetHeaderColumnStyle() *TSP.Reference {
	if m != nil {
		return m.HeaderColumnStyle
	}
	return nil
}

func (m *TableModelArchive) GetFooterRowStyle() *TSP.Reference {
	if m != nil {
		return m.FooterRowStyle
	}
	return nil
}

func (m *TableModelArchive) GetTableNameStyle() *TSP.Reference {
	if m != nil {
		return m.TableNameStyle
	}
	return nil
}

func (m *TableModelArchive) GetTableNameShapeStyle() *TSP.Reference {
	if m != nil {
		return m.TableNameShapeStyle
	}
	return nil
}

func (m *TableModelArchive) GetDataStore() *DataStore {
	if m != nil {
		return m.DataStore
	}
	return nil
}

func (m *TableModelArchive) GetProvider() *TSP.Reference {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *TableModelArchive) GetNumberOfRows() uint32 {
	if m != nil && m.NumberOfRows != nil {
		return *m.NumberOfRows
	}
	return 0
}

func (m *TableModelArchive) GetNumberOfColumns() uint32 {
	if m != nil && m.NumberOfColumns != nil {
		return *m.NumberOfColumns
	}
	return 0
}

func (m *TableModelArchive) GetTableName() string {
	if m != nil && m.TableName != nil {
		return *m.TableName
	}
	return ""
}

func (m *TableModelArchive) GetTableNameEnabled() bool {
	if m != nil && m.TableNameEnabled != nil {
		return *m.TableNameEnabled
	}
	return false
}

func (m *TableModelArchive) GetTableNameHeight() float64 {
	if m != nil && m.TableNameHeight != nil {
		return *m.TableNameHeight
	}
	return 0
}

func (m *TableModelArchive) GetTableNameBorderEnabled() bool {
	if m != nil && m.TableNameBorderEnabled != nil {
		return *m.TableNameBorderEnabled
	}
	return false
}

func (m *TableModelArchive) GetNumberOfHeaderRows() uint32 {
	if m != nil && m.NumberOfHeaderRows != nil {
		return *m.NumberOfHeaderRows
	}
	return 0
}

func (m *TableModelArchive) GetNumberOfHeaderColumns() uint32 {
	if m != nil && m.NumberOfHeaderColumns != nil {
		return *m.NumberOfHeaderColumns
	}
	return 0
}

func (m *TableModelArchive) GetNumberOfFooterRows() uint32 {
	if m != nil && m.NumberOfFooterRows != nil {
		return *m.NumberOfFooterRows
	}
	return 0
}

func (m *TableModelArchive) GetHeaderRowsFrozen() bool {
	if m != nil && m.HeaderRowsFrozen != nil {
		return *m.HeaderRowsFrozen
	}
	return false
}

func (m *TableModelArchive) GetHeaderColumnsFrozen() bool {
	if m != nil && m.HeaderColumnsFrozen != nil {
		return *m.HeaderColumnsFrozen
	}
	return false
}

func (m *TableModelArchive) GetNumberOfHiddenRows() uint32 {
	if m != nil && m.NumberOfHiddenRows != nil {
		return *m.NumberOfHiddenRows
	}
	return 0
}

func (m *TableModelArchive) GetNumberOfHiddenColumns() uint32 {
	if m != nil && m.NumberOfHiddenColumns != nil {
		return *m.NumberOfHiddenColumns
	}
	return 0
}

func (m *TableModelArchive) GetNumberOfUserHiddenRows() uint32 {
	if m != nil && m.NumberOfUserHiddenRows != nil {
		return *m.NumberOfUserHiddenRows
	}
	return 0
}

func (m *TableModelArchive) GetNumberOfUserHiddenColumns() uint32 {
	if m != nil && m.NumberOfUserHiddenColumns != nil {
		return *m.NumberOfUserHiddenColumns
	}
	return 0
}

func (m *TableModelArchive) GetNumberOfFilteredRows() uint32 {
	if m != nil && m.NumberOfFilteredRows != nil {
		return *m.NumberOfFilteredRows
	}
	return 0
}

func (m *TableModelArchive) GetDefaultRowHeight() float64 {
	if m != nil && m.DefaultRowHeight != nil {
		return *m.DefaultRowHeight
	}
	return 0
}

func (m *TableModelArchive) GetDefaultColumnWidth() float64 {
	if m != nil && m.DefaultColumnWidth != nil {
		return *m.DefaultColumnWidth
	}
	return 0
}

func (m *TableModelArchive) GetOriginOffset() *CellID {
	if m != nil {
		return m.OriginOffset
	}
	return nil
}

func (m *TableModelArchive) GetPresetIndex() uint32 {
	if m != nil && m.PresetIndex != nil {
		return *m.PresetIndex
	}
	return 0
}

func (m *TableModelArchive) GetRepeatingHeaderRowsEnabled() bool {
	if m != nil && m.RepeatingHeaderRowsEnabled != nil {
		return *m.RepeatingHeaderRowsEnabled
	}
	return false
}

func (m *TableModelArchive) GetRepeatingHeaderColumnsEnabled() bool {
	if m != nil && m.RepeatingHeaderColumnsEnabled != nil {
		return *m.RepeatingHeaderColumnsEnabled
	}
	return false
}

func (m *TableModelArchive) GetStyleApplyClearsAll() bool {
	if m != nil && m.StyleApplyClearsAll != nil {
		return *m.StyleApplyClearsAll
	}
	return false
}

func (m *TableModelArchive) GetHiddenStateFormulaOwnerForColumns() *TSP.Reference {
	if m != nil {
		return m.HiddenStateFormulaOwnerForColumns
	}
	return nil
}

func (m *TableModelArchive) GetHiddenStateFormulaOwnerForRows() *TSP.Reference {
	if m != nil {
		return m.HiddenStateFormulaOwnerForRows
	}
	return nil
}

func (m *TableModelArchive) GetFilterSet() *TSP.Reference {
	if m != nil {
		return m.FilterSet
	}
	return nil
}

func (m *TableModelArchive) GetConditionalStyleFormulaOwnerId() *TSCE.CFUUIDArchive {
	if m != nil {
		return m.ConditionalStyleFormulaOwnerId
	}
	return nil
}

type DurationWrapperArchive struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DurationWrapperArchive) Reset()         { *m = DurationWrapperArchive{} }
func (m *DurationWrapperArchive) String() string { return proto.CompactTextString(m) }
func (*DurationWrapperArchive) ProtoMessage()    {}

type Cell struct {
	ValueType                   *CellValueType           `protobuf:"varint,2,req,name=valueType,enum=CellValueType" json:"valueType,omitempty"`
	NumberValue                 *float64                 `protobuf:"fixed64,5,opt,name=numberValue" json:"numberValue,omitempty"`
	StringValue                 *string                  `protobuf:"bytes,6,opt,name=stringValue" json:"stringValue,omitempty"`
	BoolValue                   *bool                    `protobuf:"varint,7,opt,name=boolValue" json:"boolValue,omitempty"`
	CellStyle                   *TSP.Reference           `protobuf:"bytes,3,opt,name=cell_style" json:"cell_style,omitempty"`
	TextStyle                   *TSP.Reference           `protobuf:"bytes,4,opt,name=text_style" json:"text_style,omitempty"`
	Formula                     *TSCE.FormulaArchive     `protobuf:"bytes,8,opt,name=formula" json:"formula,omitempty"`
	FormulaError                *TSP.Reference           `protobuf:"bytes,10,opt,name=formulaError" json:"formulaError,omitempty"`
	CurrentFormat               *TSK.FormatStructArchive `protobuf:"bytes,9,opt,name=current_format" json:"current_format,omitempty"`
	NumberFormat                *TSK.FormatStructArchive `protobuf:"bytes,11,opt,name=number_format" json:"number_format,omitempty"`
	CurrencyFormat              *TSK.FormatStructArchive `protobuf:"bytes,12,opt,name=currency_format" json:"currency_format,omitempty"`
	DurationFormat              *TSK.FormatStructArchive `protobuf:"bytes,13,opt,name=duration_format" json:"duration_format,omitempty"`
	DateFormat                  *TSK.FormatStructArchive `protobuf:"bytes,14,opt,name=date_format" json:"date_format,omitempty"`
	ControlFormat               *TSK.FormatStructArchive `protobuf:"bytes,15,opt,name=control_format" json:"control_format,omitempty"`
	CustomFormat                *TSK.FormatStructArchive `protobuf:"bytes,16,opt,name=custom_format" json:"custom_format,omitempty"`
	BaseFormat                  *TSK.FormatStructArchive `protobuf:"bytes,17,opt,name=base_format" json:"base_format,omitempty"`
	MultipleChoiceListFormat    *TSK.FormatStructArchive `protobuf:"bytes,18,opt,name=multiple_choice_list_format" json:"multiple_choice_list_format,omitempty"`
	ExplicitFormatFlags         *uint32                  `protobuf:"varint,19,opt,name=explicit_format_flags" json:"explicit_format_flags,omitempty"`
	RichTextPayload             *TSP.Reference           `protobuf:"bytes,20,opt,name=richTextPayload" json:"richTextPayload,omitempty"`
	ConditionalStyle            *TSP.Reference           `protobuf:"bytes,21,opt,name=conditional_style" json:"conditional_style,omitempty"`
	MultipleChoiceList          *TSP.Reference           `protobuf:"bytes,22,opt,name=multiple_choice_list" json:"multiple_choice_list,omitempty"`
	CommentStorage              *TSP.Reference           `protobuf:"bytes,23,opt,name=comment_storage" json:"comment_storage,omitempty"`
	ConditionalStyleAppliedRule *uint32                  `protobuf:"varint,24,opt,name=conditional_style_applied_rule" json:"conditional_style_applied_rule,omitempty"`
	XXX_unrecognized            []byte                   `json:"-"`
}

func (m *Cell) Reset()         { *m = Cell{} }
func (m *Cell) String() string { return proto.CompactTextString(m) }
func (*Cell) ProtoMessage()    {}

func (m *Cell) GetValueType() CellValueType {
	if m != nil && m.ValueType != nil {
		return *m.ValueType
	}
	return CellValueType_emptyCellValueType
}

func (m *Cell) GetNumberValue() float64 {
	if m != nil && m.NumberValue != nil {
		return *m.NumberValue
	}
	return 0
}

func (m *Cell) GetStringValue() string {
	if m != nil && m.StringValue != nil {
		return *m.StringValue
	}
	return ""
}

func (m *Cell) GetBoolValue() bool {
	if m != nil && m.BoolValue != nil {
		return *m.BoolValue
	}
	return false
}

func (m *Cell) GetCellStyle() *TSP.Reference {
	if m != nil {
		return m.CellStyle
	}
	return nil
}

func (m *Cell) GetTextStyle() *TSP.Reference {
	if m != nil {
		return m.TextStyle
	}
	return nil
}

func (m *Cell) GetFormula() *TSCE.FormulaArchive {
	if m != nil {
		return m.Formula
	}
	return nil
}

func (m *Cell) GetFormulaError() *TSP.Reference {
	if m != nil {
		return m.FormulaError
	}
	return nil
}

func (m *Cell) GetCurrentFormat() *TSK.FormatStructArchive {
	if m != nil {
		return m.CurrentFormat
	}
	return nil
}

func (m *Cell) GetNumberFormat() *TSK.FormatStructArchive {
	if m != nil {
		return m.NumberFormat
	}
	return nil
}

func (m *Cell) GetCurrencyFormat() *TSK.FormatStructArchive {
	if m != nil {
		return m.CurrencyFormat
	}
	return nil
}

func (m *Cell) GetDurationFormat() *TSK.FormatStructArchive {
	if m != nil {
		return m.DurationFormat
	}
	return nil
}

func (m *Cell) GetDateFormat() *TSK.FormatStructArchive {
	if m != nil {
		return m.DateFormat
	}
	return nil
}

func (m *Cell) GetControlFormat() *TSK.FormatStructArchive {
	if m != nil {
		return m.ControlFormat
	}
	return nil
}

func (m *Cell) GetCustomFormat() *TSK.FormatStructArchive {
	if m != nil {
		return m.CustomFormat
	}
	return nil
}

func (m *Cell) GetBaseFormat() *TSK.FormatStructArchive {
	if m != nil {
		return m.BaseFormat
	}
	return nil
}

func (m *Cell) GetMultipleChoiceListFormat() *TSK.FormatStructArchive {
	if m != nil {
		return m.MultipleChoiceListFormat
	}
	return nil
}

func (m *Cell) GetExplicitFormatFlags() uint32 {
	if m != nil && m.ExplicitFormatFlags != nil {
		return *m.ExplicitFormatFlags
	}
	return 0
}

func (m *Cell) GetRichTextPayload() *TSP.Reference {
	if m != nil {
		return m.RichTextPayload
	}
	return nil
}

func (m *Cell) GetConditionalStyle() *TSP.Reference {
	if m != nil {
		return m.ConditionalStyle
	}
	return nil
}

func (m *Cell) GetMultipleChoiceList() *TSP.Reference {
	if m != nil {
		return m.MultipleChoiceList
	}
	return nil
}

func (m *Cell) GetCommentStorage() *TSP.Reference {
	if m != nil {
		return m.CommentStorage
	}
	return nil
}

func (m *Cell) GetConditionalStyleAppliedRule() uint32 {
	if m != nil && m.ConditionalStyleAppliedRule != nil {
		return *m.ConditionalStyleAppliedRule
	}
	return 0
}

type MergeRegionMapArchive struct {
	CellRange        []*CellRange `protobuf:"bytes,1,rep,name=cell_range" json:"cell_range,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *MergeRegionMapArchive) Reset()         { *m = MergeRegionMapArchive{} }
func (m *MergeRegionMapArchive) String() string { return proto.CompactTextString(m) }
func (*MergeRegionMapArchive) ProtoMessage()    {}

func (m *MergeRegionMapArchive) GetCellRange() []*CellRange {
	if m != nil {
		return m.CellRange
	}
	return nil
}

type CellMapArchive struct {
	Capacity                            *uint32                        `protobuf:"varint,1,req,name=capacity" json:"capacity,omitempty"`
	Count                               *uint32                        `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
	CellMapEntry                        []*CellMapArchive_CellMapEntry `protobuf:"bytes,3,rep,name=cellMapEntry" json:"cellMapEntry,omitempty"`
	MayModifyFormulasInCells            *bool                          `protobuf:"varint,4,opt,name=may_modify_formulas_in_cells,def=1" json:"may_modify_formulas_in_cells,omitempty"`
	MayModifyValuesReferencedByFormulas *bool                          `protobuf:"varint,5,opt,name=may_modify_values_referenced_by_formulas,def=1" json:"may_modify_values_referenced_by_formulas,omitempty"`
	AppliesToHidden                     *bool                          `protobuf:"varint,6,opt,name=applies_to_hidden,def=0" json:"applies_to_hidden,omitempty"`
	XXX_unrecognized                    []byte                         `json:"-"`
}

func (m *CellMapArchive) Reset()         { *m = CellMapArchive{} }
func (m *CellMapArchive) String() string { return proto.CompactTextString(m) }
func (*CellMapArchive) ProtoMessage()    {}

const Default_CellMapArchive_MayModifyFormulasInCells bool = true
const Default_CellMapArchive_MayModifyValuesReferencedByFormulas bool = true
const Default_CellMapArchive_AppliesToHidden bool = false

func (m *CellMapArchive) GetCapacity() uint32 {
	if m != nil && m.Capacity != nil {
		return *m.Capacity
	}
	return 0
}

func (m *CellMapArchive) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *CellMapArchive) GetCellMapEntry() []*CellMapArchive_CellMapEntry {
	if m != nil {
		return m.CellMapEntry
	}
	return nil
}

func (m *CellMapArchive) GetMayModifyFormulasInCells() bool {
	if m != nil && m.MayModifyFormulasInCells != nil {
		return *m.MayModifyFormulasInCells
	}
	return Default_CellMapArchive_MayModifyFormulasInCells
}

func (m *CellMapArchive) GetMayModifyValuesReferencedByFormulas() bool {
	if m != nil && m.MayModifyValuesReferencedByFormulas != nil {
		return *m.MayModifyValuesReferencedByFormulas
	}
	return Default_CellMapArchive_MayModifyValuesReferencedByFormulas
}

func (m *CellMapArchive) GetAppliesToHidden() bool {
	if m != nil && m.AppliesToHidden != nil {
		return *m.AppliesToHidden
	}
	return Default_CellMapArchive_AppliesToHidden
}

type CellMapArchive_CellMapEntry struct {
	CellID           *CellID `protobuf:"bytes,1,req,name=cellID" json:"cellID,omitempty"`
	Cell             *Cell   `protobuf:"bytes,2,opt,name=cell" json:"cell,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CellMapArchive_CellMapEntry) Reset()         { *m = CellMapArchive_CellMapEntry{} }
func (m *CellMapArchive_CellMapEntry) String() string { return proto.CompactTextString(m) }
func (*CellMapArchive_CellMapEntry) ProtoMessage()    {}

func (m *CellMapArchive_CellMapEntry) GetCellID() *CellID {
	if m != nil {
		return m.CellID
	}
	return nil
}

func (m *CellMapArchive_CellMapEntry) GetCell() *Cell {
	if m != nil {
		return m.Cell
	}
	return nil
}

type DoubleStyleMapArchive struct {
	Capacity         *uint32                                             `protobuf:"varint,1,req,name=capacity" json:"capacity,omitempty"`
	Count            *uint32                                             `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
	CellMapEntry     []*DoubleStyleMapArchive_DoubleStyleMapEntryArchive `protobuf:"bytes,3,rep,name=cell_map_entry" json:"cell_map_entry,omitempty"`
	XXX_unrecognized []byte                                              `json:"-"`
}

func (m *DoubleStyleMapArchive) Reset()         { *m = DoubleStyleMapArchive{} }
func (m *DoubleStyleMapArchive) String() string { return proto.CompactTextString(m) }
func (*DoubleStyleMapArchive) ProtoMessage()    {}

func (m *DoubleStyleMapArchive) GetCapacity() uint32 {
	if m != nil && m.Capacity != nil {
		return *m.Capacity
	}
	return 0
}

func (m *DoubleStyleMapArchive) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *DoubleStyleMapArchive) GetCellMapEntry() []*DoubleStyleMapArchive_DoubleStyleMapEntryArchive {
	if m != nil {
		return m.CellMapEntry
	}
	return nil
}

type DoubleStyleMapArchive_DoubleStyleMapEntryArchive struct {
	CellId           *CellID        `protobuf:"bytes,1,req,name=cell_id" json:"cell_id,omitempty"`
	OldStyle         *TSP.Reference `protobuf:"bytes,2,req,name=old_style" json:"old_style,omitempty"`
	NewStyle         *TSP.Reference `protobuf:"bytes,3,req,name=new_style" json:"new_style,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *DoubleStyleMapArchive_DoubleStyleMapEntryArchive) Reset() {
	*m = DoubleStyleMapArchive_DoubleStyleMapEntryArchive{}
}
func (m *DoubleStyleMapArchive_DoubleStyleMapEntryArchive) String() string {
	return proto.CompactTextString(m)
}
func (*DoubleStyleMapArchive_DoubleStyleMapEntryArchive) ProtoMessage() {}

func (m *DoubleStyleMapArchive_DoubleStyleMapEntryArchive) GetCellId() *CellID {
	if m != nil {
		return m.CellId
	}
	return nil
}

func (m *DoubleStyleMapArchive_DoubleStyleMapEntryArchive) GetOldStyle() *TSP.Reference {
	if m != nil {
		return m.OldStyle
	}
	return nil
}

func (m *DoubleStyleMapArchive_DoubleStyleMapEntryArchive) GetNewStyle() *TSP.Reference {
	if m != nil {
		return m.NewStyle
	}
	return nil
}

type StyleTableMapArchive struct {
	Capacity         *uint32                                           `protobuf:"varint,1,req,name=capacity" json:"capacity,omitempty"`
	Count            *uint32                                           `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
	MapEntry         []*StyleTableMapArchive_StyleTableMapEntryArchive `protobuf:"bytes,3,rep,name=map_entry" json:"map_entry,omitempty"`
	XXX_unrecognized []byte                                            `json:"-"`
}

func (m *StyleTableMapArchive) Reset()         { *m = StyleTableMapArchive{} }
func (m *StyleTableMapArchive) String() string { return proto.CompactTextString(m) }
func (*StyleTableMapArchive) ProtoMessage()    {}

func (m *StyleTableMapArchive) GetCapacity() uint32 {
	if m != nil && m.Capacity != nil {
		return *m.Capacity
	}
	return 0
}

func (m *StyleTableMapArchive) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *StyleTableMapArchive) GetMapEntry() []*StyleTableMapArchive_StyleTableMapEntryArchive {
	if m != nil {
		return m.MapEntry
	}
	return nil
}

type StyleTableMapArchive_StyleTableMapEntryArchive struct {
	Key              *uint32        `protobuf:"varint,1,req,name=key" json:"key,omitempty"`
	OldStyle         *TSP.Reference `protobuf:"bytes,2,req,name=old_style" json:"old_style,omitempty"`
	NewStyle         *TSP.Reference `protobuf:"bytes,3,req,name=new_style" json:"new_style,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *StyleTableMapArchive_StyleTableMapEntryArchive) Reset() {
	*m = StyleTableMapArchive_StyleTableMapEntryArchive{}
}
func (m *StyleTableMapArchive_StyleTableMapEntryArchive) String() string {
	return proto.CompactTextString(m)
}
func (*StyleTableMapArchive_StyleTableMapEntryArchive) ProtoMessage() {}

func (m *StyleTableMapArchive_StyleTableMapEntryArchive) GetKey() uint32 {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return 0
}

func (m *StyleTableMapArchive_StyleTableMapEntryArchive) GetOldStyle() *TSP.Reference {
	if m != nil {
		return m.OldStyle
	}
	return nil
}

func (m *StyleTableMapArchive_StyleTableMapEntryArchive) GetNewStyle() *TSP.Reference {
	if m != nil {
		return m.NewStyle
	}
	return nil
}

type SelectionArchive struct {
	TableModel       *TSP.Reference        `protobuf:"bytes,1,opt,name=tableModel" json:"tableModel,omitempty"`
	SelectionType    *SelectionTypeArchive `protobuf:"varint,4,req,name=selection_type,enum=SelectionTypeArchive" json:"selection_type,omitempty"`
	AnchorCell       *CellID               `protobuf:"bytes,5,opt,name=anchor_cell" json:"anchor_cell,omitempty"`
	CellRanges       []*CellRange          `protobuf:"bytes,6,rep,name=cell_ranges" json:"cell_ranges,omitempty"`
	BaseRanges       []*CellRange          `protobuf:"bytes,7,rep,name=base_ranges" json:"base_ranges,omitempty"`
	CursorCell       *CellID               `protobuf:"bytes,8,opt,name=cursor_cell" json:"cursor_cell,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *SelectionArchive) Reset()         { *m = SelectionArchive{} }
func (m *SelectionArchive) String() string { return proto.CompactTextString(m) }
func (*SelectionArchive) ProtoMessage()    {}

func (m *SelectionArchive) GetTableModel() *TSP.Reference {
	if m != nil {
		return m.TableModel
	}
	return nil
}

func (m *SelectionArchive) GetSelectionType() SelectionTypeArchive {
	if m != nil && m.SelectionType != nil {
		return *m.SelectionType
	}
	return SelectionTypeArchive_cellSelectionType
}

func (m *SelectionArchive) GetAnchorCell() *CellID {
	if m != nil {
		return m.AnchorCell
	}
	return nil
}

func (m *SelectionArchive) GetCellRanges() []*CellRange {
	if m != nil {
		return m.CellRanges
	}
	return nil
}

func (m *SelectionArchive) GetBaseRanges() []*CellRange {
	if m != nil {
		return m.BaseRanges
	}
	return nil
}

func (m *SelectionArchive) GetCursorCell() *CellID {
	if m != nil {
		return m.CursorCell
	}
	return nil
}

type FilterRuleArchive struct {
	Predicate        *FormulaPredicateArchive `protobuf:"bytes,1,req,name=predicate" json:"predicate,omitempty"`
	Disabled         *bool                    `protobuf:"varint,2,opt,name=disabled" json:"disabled,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *FilterRuleArchive) Reset()         { *m = FilterRuleArchive{} }
func (m *FilterRuleArchive) String() string { return proto.CompactTextString(m) }
func (*FilterRuleArchive) ProtoMessage()    {}

func (m *FilterRuleArchive) GetPredicate() *FormulaPredicateArchive {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (m *FilterRuleArchive) GetDisabled() bool {
	if m != nil && m.Disabled != nil {
		return *m.Disabled
	}
	return false
}

type TableStyleArchive struct {
	Super            *TSS.StyleArchive            `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OverrideCount    *uint32                      `protobuf:"varint,10,opt,name=override_count,def=0" json:"override_count,omitempty"`
	TableProperties  *TableStylePropertiesArchive `protobuf:"bytes,11,opt,name=table_properties" json:"table_properties,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *TableStyleArchive) Reset()         { *m = TableStyleArchive{} }
func (m *TableStyleArchive) String() string { return proto.CompactTextString(m) }
func (*TableStyleArchive) ProtoMessage()    {}

const Default_TableStyleArchive_OverrideCount uint32 = 0

func (m *TableStyleArchive) GetSuper() *TSS.StyleArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *TableStyleArchive) GetOverrideCount() uint32 {
	if m != nil && m.OverrideCount != nil {
		return *m.OverrideCount
	}
	return Default_TableStyleArchive_OverrideCount
}

func (m *TableStyleArchive) GetTableProperties() *TableStylePropertiesArchive {
	if m != nil {
		return m.TableProperties
	}
	return nil
}

type CellStyleArchive struct {
	Super            *TSS.StyleArchive           `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OverrideCount    *uint32                     `protobuf:"varint,10,opt,name=override_count,def=0" json:"override_count,omitempty"`
	CellProperties   *CellStylePropertiesArchive `protobuf:"bytes,11,opt,name=cell_properties" json:"cell_properties,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *CellStyleArchive) Reset()         { *m = CellStyleArchive{} }
func (m *CellStyleArchive) String() string { return proto.CompactTextString(m) }
func (*CellStyleArchive) ProtoMessage()    {}

const Default_CellStyleArchive_OverrideCount uint32 = 0

func (m *CellStyleArchive) GetSuper() *TSS.StyleArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *CellStyleArchive) GetOverrideCount() uint32 {
	if m != nil && m.OverrideCount != nil {
		return *m.OverrideCount
	}
	return Default_CellStyleArchive_OverrideCount
}

func (m *CellStyleArchive) GetCellProperties() *CellStylePropertiesArchive {
	if m != nil {
		return m.CellProperties
	}
	return nil
}

type FormulaPredicateArchive struct {
	Formula          *TSCE.FormulaArchive                          `protobuf:"bytes,1,req,name=formula" json:"formula,omitempty"`
	PredicateType    *FormulaPredicateArchive_FormulaPredicateType `protobuf:"varint,2,req,name=predicate_type,enum=FormulaPredicateArchive_FormulaPredicateType" json:"predicate_type,omitempty"`
	Qualifier1       *FormulaPredicateArchive_QualifierType        `protobuf:"varint,3,req,name=qualifier1,enum=FormulaPredicateArchive_QualifierType" json:"qualifier1,omitempty"`
	Qualifier2       *FormulaPredicateArchive_QualifierType        `protobuf:"varint,4,req,name=qualifier2,enum=FormulaPredicateArchive_QualifierType" json:"qualifier2,omitempty"`
	ParamIndex1      *int32                                        `protobuf:"varint,5,req,name=param_index1" json:"param_index1,omitempty"`
	ParamIndex2      *int32                                        `protobuf:"varint,6,req,name=param_index2" json:"param_index2,omitempty"`
	ParamIndex0      *int32                                        `protobuf:"varint,7,req,name=param_index0" json:"param_index0,omitempty"`
	XXX_unrecognized []byte                                        `json:"-"`
}

func (m *FormulaPredicateArchive) Reset()         { *m = FormulaPredicateArchive{} }
func (m *FormulaPredicateArchive) String() string { return proto.CompactTextString(m) }
func (*FormulaPredicateArchive) ProtoMessage()    {}

func (m *FormulaPredicateArchive) GetFormula() *TSCE.FormulaArchive {
	if m != nil {
		return m.Formula
	}
	return nil
}

func (m *FormulaPredicateArchive) GetPredicateType() FormulaPredicateArchive_FormulaPredicateType {
	if m != nil && m.PredicateType != nil {
		return *m.PredicateType
	}
	return FormulaPredicateArchive_PredNone
}

func (m *FormulaPredicateArchive) GetQualifier1() FormulaPredicateArchive_QualifierType {
	if m != nil && m.Qualifier1 != nil {
		return *m.Qualifier1
	}
	return FormulaPredicateArchive_QualNone
}

func (m *FormulaPredicateArchive) GetQualifier2() FormulaPredicateArchive_QualifierType {
	if m != nil && m.Qualifier2 != nil {
		return *m.Qualifier2
	}
	return FormulaPredicateArchive_QualNone
}

func (m *FormulaPredicateArchive) GetParamIndex1() int32 {
	if m != nil && m.ParamIndex1 != nil {
		return *m.ParamIndex1
	}
	return 0
}

func (m *FormulaPredicateArchive) GetParamIndex2() int32 {
	if m != nil && m.ParamIndex2 != nil {
		return *m.ParamIndex2
	}
	return 0
}

func (m *FormulaPredicateArchive) GetParamIndex0() int32 {
	if m != nil && m.ParamIndex0 != nil {
		return *m.ParamIndex0
	}
	return 0
}

type ConditionalStyleSetArchive struct {
	RuleCount        *uint32                                            `protobuf:"varint,1,req,name=ruleCount" json:"ruleCount,omitempty"`
	Rules            []*ConditionalStyleSetArchive_ConditionalStyleRule `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
	CellID           *CellID                                            `protobuf:"bytes,3,opt,name=cellID" json:"cellID,omitempty"`
	XXX_unrecognized []byte                                             `json:"-"`
}

func (m *ConditionalStyleSetArchive) Reset()         { *m = ConditionalStyleSetArchive{} }
func (m *ConditionalStyleSetArchive) String() string { return proto.CompactTextString(m) }
func (*ConditionalStyleSetArchive) ProtoMessage()    {}

func (m *ConditionalStyleSetArchive) GetRuleCount() uint32 {
	if m != nil && m.RuleCount != nil {
		return *m.RuleCount
	}
	return 0
}

func (m *ConditionalStyleSetArchive) GetRules() []*ConditionalStyleSetArchive_ConditionalStyleRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *ConditionalStyleSetArchive) GetCellID() *CellID {
	if m != nil {
		return m.CellID
	}
	return nil
}

type ConditionalStyleSetArchive_ConditionalStyleRule struct {
	Predicate        *FormulaPredicateArchive `protobuf:"bytes,1,req,name=predicate" json:"predicate,omitempty"`
	CellStyle        *TSP.Reference           `protobuf:"bytes,2,req,name=cell_style" json:"cell_style,omitempty"`
	TextStyle        *TSP.Reference           `protobuf:"bytes,3,req,name=text_style" json:"text_style,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *ConditionalStyleSetArchive_ConditionalStyleRule) Reset() {
	*m = ConditionalStyleSetArchive_ConditionalStyleRule{}
}
func (m *ConditionalStyleSetArchive_ConditionalStyleRule) String() string {
	return proto.CompactTextString(m)
}
func (*ConditionalStyleSetArchive_ConditionalStyleRule) ProtoMessage() {}

func (m *ConditionalStyleSetArchive_ConditionalStyleRule) GetPredicate() *FormulaPredicateArchive {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (m *ConditionalStyleSetArchive_ConditionalStyleRule) GetCellStyle() *TSP.Reference {
	if m != nil {
		return m.CellStyle
	}
	return nil
}

func (m *ConditionalStyleSetArchive_ConditionalStyleRule) GetTextStyle() *TSP.Reference {
	if m != nil {
		return m.TextStyle
	}
	return nil
}

type FilterSetArchive struct {
	Type                         *FilterSetArchive_FilterSetType `protobuf:"varint,1,opt,name=type,enum=FilterSetArchive_FilterSetType,def=0" json:"type,omitempty"`
	IsEnabled                    *bool                           `protobuf:"varint,2,opt,name=is_enabled,def=1" json:"is_enabled,omitempty"`
	FilterRules                  []*FilterRuleArchive            `protobuf:"bytes,3,rep,name=filter_rules" json:"filter_rules,omitempty"`
	NeedsFormulaRewriteForImport *bool                           `protobuf:"varint,4,opt,name=needs_formula_rewrite_for_import,def=0" json:"needs_formula_rewrite_for_import,omitempty"`
	FilterOffsets                []uint32                        `protobuf:"varint,5,rep,name=filter_offsets" json:"filter_offsets,omitempty"`
	FilterEnabled                []bool                          `protobuf:"varint,6,rep,name=filter_enabled" json:"filter_enabled,omitempty"`
	XXX_unrecognized             []byte                          `json:"-"`
}

func (m *FilterSetArchive) Reset()         { *m = FilterSetArchive{} }
func (m *FilterSetArchive) String() string { return proto.CompactTextString(m) }
func (*FilterSetArchive) ProtoMessage()    {}

const Default_FilterSetArchive_Type FilterSetArchive_FilterSetType = FilterSetArchive_FilterSetArchiveTypeAll
const Default_FilterSetArchive_IsEnabled bool = true
const Default_FilterSetArchive_NeedsFormulaRewriteForImport bool = false

func (m *FilterSetArchive) GetType() FilterSetArchive_FilterSetType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_FilterSetArchive_Type
}

func (m *FilterSetArchive) GetIsEnabled() bool {
	if m != nil && m.IsEnabled != nil {
		return *m.IsEnabled
	}
	return Default_FilterSetArchive_IsEnabled
}

func (m *FilterSetArchive) GetFilterRules() []*FilterRuleArchive {
	if m != nil {
		return m.FilterRules
	}
	return nil
}

func (m *FilterSetArchive) GetNeedsFormulaRewriteForImport() bool {
	if m != nil && m.NeedsFormulaRewriteForImport != nil {
		return *m.NeedsFormulaRewriteForImport
	}
	return Default_FilterSetArchive_NeedsFormulaRewriteForImport
}

func (m *FilterSetArchive) GetFilterOffsets() []uint32 {
	if m != nil {
		return m.FilterOffsets
	}
	return nil
}

func (m *FilterSetArchive) GetFilterEnabled() []bool {
	if m != nil {
		return m.FilterEnabled
	}
	return nil
}

type TokenAttachmentArchive struct {
	Super            *TSWP.UIGraphicalAttachment `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ExpressionNode   *TSP.Reference              `protobuf:"bytes,2,opt,name=expressionNode" json:"expressionNode,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *TokenAttachmentArchive) Reset()         { *m = TokenAttachmentArchive{} }
func (m *TokenAttachmentArchive) String() string { return proto.CompactTextString(m) }
func (*TokenAttachmentArchive) ProtoMessage()    {}

func (m *TokenAttachmentArchive) GetSuper() *TSWP.UIGraphicalAttachment {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *TokenAttachmentArchive) GetExpressionNode() *TSP.Reference {
	if m != nil {
		return m.ExpressionNode
	}
	return nil
}

type FormulaArchive struct {
	ExpressionTree   *TSP.Reference `protobuf:"bytes,1,opt,name=expressionTree" json:"expressionTree,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *FormulaArchive) Reset()         { *m = FormulaArchive{} }
func (m *FormulaArchive) String() string { return proto.CompactTextString(m) }
func (*FormulaArchive) ProtoMessage()    {}

func (m *FormulaArchive) GetExpressionTree() *TSP.Reference {
	if m != nil {
		return m.ExpressionTree
	}
	return nil
}

type ExpressionNodeArchive struct {
	Children         []*TSP.Reference `protobuf:"bytes,1,rep,name=children" json:"children,omitempty"`
	FirstIndex       *uint64          `protobuf:"varint,2,opt,name=first_index,def=0" json:"first_index,omitempty"`
	LastIndex        *uint64          `protobuf:"varint,3,opt,name=last_index,def=0" json:"last_index,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *ExpressionNodeArchive) Reset()         { *m = ExpressionNodeArchive{} }
func (m *ExpressionNodeArchive) String() string { return proto.CompactTextString(m) }
func (*ExpressionNodeArchive) ProtoMessage()    {}

const Default_ExpressionNodeArchive_FirstIndex uint64 = 0
const Default_ExpressionNodeArchive_LastIndex uint64 = 0

func (m *ExpressionNodeArchive) GetChildren() []*TSP.Reference {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *ExpressionNodeArchive) GetFirstIndex() uint64 {
	if m != nil && m.FirstIndex != nil {
		return *m.FirstIndex
	}
	return Default_ExpressionNodeArchive_FirstIndex
}

func (m *ExpressionNodeArchive) GetLastIndex() uint64 {
	if m != nil && m.LastIndex != nil {
		return *m.LastIndex
	}
	return Default_ExpressionNodeArchive_LastIndex
}

type BooleanNodeArchive struct {
	Super            *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Value            *bool                  `protobuf:"varint,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *BooleanNodeArchive) Reset()         { *m = BooleanNodeArchive{} }
func (m *BooleanNodeArchive) String() string { return proto.CompactTextString(m) }
func (*BooleanNodeArchive) ProtoMessage()    {}

func (m *BooleanNodeArchive) GetSuper() *ExpressionNodeArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *BooleanNodeArchive) GetValue() bool {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return false
}

type NumberNodeArchive struct {
	Super            *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Number           *float64               `protobuf:"fixed64,2,req,name=number" json:"number,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *NumberNodeArchive) Reset()         { *m = NumberNodeArchive{} }
func (m *NumberNodeArchive) String() string { return proto.CompactTextString(m) }
func (*NumberNodeArchive) ProtoMessage()    {}

func (m *NumberNodeArchive) GetSuper() *ExpressionNodeArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *NumberNodeArchive) GetNumber() float64 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

type StringNodeArchive struct {
	Super            *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Value            *string                `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *StringNodeArchive) Reset()         { *m = StringNodeArchive{} }
func (m *StringNodeArchive) String() string { return proto.CompactTextString(m) }
func (*StringNodeArchive) ProtoMessage()    {}

func (m *StringNodeArchive) GetSuper() *ExpressionNodeArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *StringNodeArchive) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type IdentifierNodeArchive struct {
	Super            *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Identifier       *string                `protobuf:"bytes,2,opt,name=identifier" json:"identifier,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *IdentifierNodeArchive) Reset()         { *m = IdentifierNodeArchive{} }
func (m *IdentifierNodeArchive) String() string { return proto.CompactTextString(m) }
func (*IdentifierNodeArchive) ProtoMessage()    {}

func (m *IdentifierNodeArchive) GetSuper() *ExpressionNodeArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *IdentifierNodeArchive) GetIdentifier() string {
	if m != nil && m.Identifier != nil {
		return *m.Identifier
	}
	return ""
}

type ArrayNodeArchive struct {
	Super            *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Columns          *uint32                `protobuf:"varint,2,opt,name=columns" json:"columns,omitempty"`
	Rows             *uint32                `protobuf:"varint,3,opt,name=rows" json:"rows,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *ArrayNodeArchive) Reset()         { *m = ArrayNodeArchive{} }
func (m *ArrayNodeArchive) String() string { return proto.CompactTextString(m) }
func (*ArrayNodeArchive) ProtoMessage()    {}

func (m *ArrayNodeArchive) GetSuper() *ExpressionNodeArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *ArrayNodeArchive) GetColumns() uint32 {
	if m != nil && m.Columns != nil {
		return *m.Columns
	}
	return 0
}

func (m *ArrayNodeArchive) GetRows() uint32 {
	if m != nil && m.Rows != nil {
		return *m.Rows
	}
	return 0
}

type ListNodeArchive struct {
	Super            *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *ListNodeArchive) Reset()         { *m = ListNodeArchive{} }
func (m *ListNodeArchive) String() string { return proto.CompactTextString(m) }
func (*ListNodeArchive) ProtoMessage()    {}

func (m *ListNodeArchive) GetSuper() *ExpressionNodeArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

type OperatorNodeArchive struct {
	Super            *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OperatorChar     *uint32                `protobuf:"varint,2,req,name=operatorChar" json:"operatorChar,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *OperatorNodeArchive) Reset()         { *m = OperatorNodeArchive{} }
func (m *OperatorNodeArchive) String() string { return proto.CompactTextString(m) }
func (*OperatorNodeArchive) ProtoMessage()    {}

func (m *OperatorNodeArchive) GetSuper() *ExpressionNodeArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *OperatorNodeArchive) GetOperatorChar() uint32 {
	if m != nil && m.OperatorChar != nil {
		return *m.OperatorChar
	}
	return 0
}

type PostfixOperatorNodeArchive struct {
	Super            *OperatorNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *PostfixOperatorNodeArchive) Reset()         { *m = PostfixOperatorNodeArchive{} }
func (m *PostfixOperatorNodeArchive) String() string { return proto.CompactTextString(m) }
func (*PostfixOperatorNodeArchive) ProtoMessage()    {}

func (m *PostfixOperatorNodeArchive) GetSuper() *OperatorNodeArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

type PrefixOperatorNodeArchive struct {
	Super            *OperatorNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *PrefixOperatorNodeArchive) Reset()         { *m = PrefixOperatorNodeArchive{} }
func (m *PrefixOperatorNodeArchive) String() string { return proto.CompactTextString(m) }
func (*PrefixOperatorNodeArchive) ProtoMessage()    {}

func (m *PrefixOperatorNodeArchive) GetSuper() *OperatorNodeArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

type FunctionNodeArchive struct {
	Super               *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	FunctionIndex       *uint32                `protobuf:"varint,2,req,name=functionIndex" json:"functionIndex,omitempty"`
	InvalidFunctionName *string                `protobuf:"bytes,3,opt,name=invalidFunctionName" json:"invalidFunctionName,omitempty"`
	XXX_unrecognized    []byte                 `json:"-"`
}

func (m *FunctionNodeArchive) Reset()         { *m = FunctionNodeArchive{} }
func (m *FunctionNodeArchive) String() string { return proto.CompactTextString(m) }
func (*FunctionNodeArchive) ProtoMessage()    {}

func (m *FunctionNodeArchive) GetSuper() *ExpressionNodeArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *FunctionNodeArchive) GetFunctionIndex() uint32 {
	if m != nil && m.FunctionIndex != nil {
		return *m.FunctionIndex
	}
	return 0
}

func (m *FunctionNodeArchive) GetInvalidFunctionName() string {
	if m != nil && m.InvalidFunctionName != nil {
		return *m.InvalidFunctionName
	}
	return ""
}

type FunctionEndNodeArchive struct {
	Super            *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *FunctionEndNodeArchive) Reset()         { *m = FunctionEndNodeArchive{} }
func (m *FunctionEndNodeArchive) String() string { return proto.CompactTextString(m) }
func (*FunctionEndNodeArchive) ProtoMessage()    {}

func (m *FunctionEndNodeArchive) GetSuper() *ExpressionNodeArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

type DateNodeArchive struct {
	Super            *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Value            *string                `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	Format           *string                `protobuf:"bytes,3,opt,name=format" json:"format,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *DateNodeArchive) Reset()         { *m = DateNodeArchive{} }
func (m *DateNodeArchive) String() string { return proto.CompactTextString(m) }
func (*DateNodeArchive) ProtoMessage()    {}

func (m *DateNodeArchive) GetSuper() *ExpressionNodeArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *DateNodeArchive) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *DateNodeArchive) GetFormat() string {
	if m != nil && m.Format != nil {
		return *m.Format
	}
	return ""
}

type ReferenceNodeArchive struct {
	Super            *ExpressionNodeArchive      `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RangeReference   *TSCE.RangeReferenceArchive `protobuf:"bytes,2,req,name=rangeReference" json:"rangeReference,omitempty"`
	StickyBits       *uint32                     `protobuf:"varint,3,req,name=stickyBits" json:"stickyBits,omitempty"`
	HostTableID      *string                     `protobuf:"bytes,4,opt,name=hostTableID" json:"hostTableID,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *ReferenceNodeArchive) Reset()         { *m = ReferenceNodeArchive{} }
func (m *ReferenceNodeArchive) String() string { return proto.CompactTextString(m) }
func (*ReferenceNodeArchive) ProtoMessage()    {}

func (m *ReferenceNodeArchive) GetSuper() *ExpressionNodeArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *ReferenceNodeArchive) GetRangeReference() *TSCE.RangeReferenceArchive {
	if m != nil {
		return m.RangeReference
	}
	return nil
}

func (m *ReferenceNodeArchive) GetStickyBits() uint32 {
	if m != nil && m.StickyBits != nil {
		return *m.StickyBits
	}
	return 0
}

func (m *ReferenceNodeArchive) GetHostTableID() string {
	if m != nil && m.HostTableID != nil {
		return *m.HostTableID
	}
	return ""
}

type DurationNodeArchive struct {
	Super            *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Timeinterval     *float64               `protobuf:"fixed64,2,req,name=timeinterval" json:"timeinterval,omitempty"`
	Smallest         *uint32                `protobuf:"varint,3,req,name=smallest" json:"smallest,omitempty"`
	Largest          *uint32                `protobuf:"varint,4,req,name=largest" json:"largest,omitempty"`
	Style            *uint32                `protobuf:"varint,5,req,name=style" json:"style,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *DurationNodeArchive) Reset()         { *m = DurationNodeArchive{} }
func (m *DurationNodeArchive) String() string { return proto.CompactTextString(m) }
func (*DurationNodeArchive) ProtoMessage()    {}

func (m *DurationNodeArchive) GetSuper() *ExpressionNodeArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *DurationNodeArchive) GetTimeinterval() float64 {
	if m != nil && m.Timeinterval != nil {
		return *m.Timeinterval
	}
	return 0
}

func (m *DurationNodeArchive) GetSmallest() uint32 {
	if m != nil && m.Smallest != nil {
		return *m.Smallest
	}
	return 0
}

func (m *DurationNodeArchive) GetLargest() uint32 {
	if m != nil && m.Largest != nil {
		return *m.Largest
	}
	return 0
}

func (m *DurationNodeArchive) GetStyle() uint32 {
	if m != nil && m.Style != nil {
		return *m.Style
	}
	return 0
}

type ArgumentPlaceholderNodeArchive struct {
	Super            *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	FunctionIndex    *uint32                `protobuf:"varint,2,req,name=functionIndex" json:"functionIndex,omitempty"`
	ArgumentIndex    *uint32                `protobuf:"varint,3,req,name=argumentIndex" json:"argumentIndex,omitempty"`
	Mode             *uint32                `protobuf:"varint,4,opt,name=mode" json:"mode,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *ArgumentPlaceholderNodeArchive) Reset()         { *m = ArgumentPlaceholderNodeArchive{} }
func (m *ArgumentPlaceholderNodeArchive) String() string { return proto.CompactTextString(m) }
func (*ArgumentPlaceholderNodeArchive) ProtoMessage()    {}

func (m *ArgumentPlaceholderNodeArchive) GetSuper() *ExpressionNodeArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *ArgumentPlaceholderNodeArchive) GetFunctionIndex() uint32 {
	if m != nil && m.FunctionIndex != nil {
		return *m.FunctionIndex
	}
	return 0
}

func (m *ArgumentPlaceholderNodeArchive) GetArgumentIndex() uint32 {
	if m != nil && m.ArgumentIndex != nil {
		return *m.ArgumentIndex
	}
	return 0
}

func (m *ArgumentPlaceholderNodeArchive) GetMode() uint32 {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return 0
}

type EmptyExpressionNodeArchive struct {
	Super            *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *EmptyExpressionNodeArchive) Reset()         { *m = EmptyExpressionNodeArchive{} }
func (m *EmptyExpressionNodeArchive) String() string { return proto.CompactTextString(m) }
func (*EmptyExpressionNodeArchive) ProtoMessage()    {}

func (m *EmptyExpressionNodeArchive) GetSuper() *ExpressionNodeArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

type LayoutHintArchive struct {
	IsValid           *bool      `protobuf:"varint,1,req,name=isValid" json:"isValid,omitempty"`
	CellRange         *CellRange `protobuf:"bytes,2,req,name=cellRange" json:"cellRange,omitempty"`
	HintID            *CellID    `protobuf:"bytes,3,req,name=hintID" json:"hintID,omitempty"`
	MaximumSize       *TSP.Size  `protobuf:"bytes,4,req,name=maximumSize" json:"maximumSize,omitempty"`
	PartitionPosition *uint32    `protobuf:"varint,5,req,name=partitionPosition" json:"partitionPosition,omitempty"`
	Horizontal        *bool      `protobuf:"varint,6,req,name=horizontal" json:"horizontal,omitempty"`
	EffectiveSize     *TSP.Size  `protobuf:"bytes,7,opt,name=effectiveSize" json:"effectiveSize,omitempty"`
	PartitioningPass  *uint32    `protobuf:"varint,8,opt,name=partitioningPass" json:"partitioningPass,omitempty"`
	XXX_unrecognized  []byte     `json:"-"`
}

func (m *LayoutHintArchive) Reset()         { *m = LayoutHintArchive{} }
func (m *LayoutHintArchive) String() string { return proto.CompactTextString(m) }
func (*LayoutHintArchive) ProtoMessage()    {}

func (m *LayoutHintArchive) GetIsValid() bool {
	if m != nil && m.IsValid != nil {
		return *m.IsValid
	}
	return false
}

func (m *LayoutHintArchive) GetCellRange() *CellRange {
	if m != nil {
		return m.CellRange
	}
	return nil
}

func (m *LayoutHintArchive) GetHintID() *CellID {
	if m != nil {
		return m.HintID
	}
	return nil
}

func (m *LayoutHintArchive) GetMaximumSize() *TSP.Size {
	if m != nil {
		return m.MaximumSize
	}
	return nil
}

func (m *LayoutHintArchive) GetPartitionPosition() uint32 {
	if m != nil && m.PartitionPosition != nil {
		return *m.PartitionPosition
	}
	return 0
}

func (m *LayoutHintArchive) GetHorizontal() bool {
	if m != nil && m.Horizontal != nil {
		return *m.Horizontal
	}
	return false
}

func (m *LayoutHintArchive) GetEffectiveSize() *TSP.Size {
	if m != nil {
		return m.EffectiveSize
	}
	return nil
}

func (m *LayoutHintArchive) GetPartitioningPass() uint32 {
	if m != nil && m.PartitioningPass != nil {
		return *m.PartitioningPass
	}
	return 0
}

type CompletionTokenAttachmentArchive struct {
	Super            *TokenAttachmentArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CompletionText   *string                 `protobuf:"bytes,2,opt,name=completionText" json:"completionText,omitempty"`
	CaretPosition    *uint32                 `protobuf:"varint,3,opt,name=caretPosition" json:"caretPosition,omitempty"`
	PrefixStart      *uint32                 `protobuf:"varint,4,opt,name=prefixStart" json:"prefixStart,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *CompletionTokenAttachmentArchive) Reset()         { *m = CompletionTokenAttachmentArchive{} }
func (m *CompletionTokenAttachmentArchive) String() string { return proto.CompactTextString(m) }
func (*CompletionTokenAttachmentArchive) ProtoMessage()    {}

func (m *CompletionTokenAttachmentArchive) GetSuper() *TokenAttachmentArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func (m *CompletionTokenAttachmentArchive) GetCompletionText() string {
	if m != nil && m.CompletionText != nil {
		return *m.CompletionText
	}
	return ""
}

func (m *CompletionTokenAttachmentArchive) GetCaretPosition() uint32 {
	if m != nil && m.CaretPosition != nil {
		return *m.CaretPosition
	}
	return 0
}

func (m *CompletionTokenAttachmentArchive) GetPrefixStart() uint32 {
	if m != nil && m.PrefixStart != nil {
		return *m.PrefixStart
	}
	return 0
}

type HiddenStateFormulaOwnerArchive struct {
	OwnerId                         *TSCE.CFUUIDArchive      `protobuf:"bytes,1,opt,name=owner_id" json:"owner_id,omitempty"`
	ThresholdValue                  []*TSCE.CellValueArchive `protobuf:"bytes,2,rep,name=threshold_value" json:"threshold_value,omitempty"`
	NeedsToUpdateFilterSetForImport *bool                    `protobuf:"varint,3,opt,name=needs_to_update_filter_set_for_import,def=0" json:"needs_to_update_filter_set_for_import,omitempty"`
	XXX_unrecognized                []byte                   `json:"-"`
}

func (m *HiddenStateFormulaOwnerArchive) Reset()         { *m = HiddenStateFormulaOwnerArchive{} }
func (m *HiddenStateFormulaOwnerArchive) String() string { return proto.CompactTextString(m) }
func (*HiddenStateFormulaOwnerArchive) ProtoMessage()    {}

const Default_HiddenStateFormulaOwnerArchive_NeedsToUpdateFilterSetForImport bool = false

func (m *HiddenStateFormulaOwnerArchive) GetOwnerId() *TSCE.CFUUIDArchive {
	if m != nil {
		return m.OwnerId
	}
	return nil
}

func (m *HiddenStateFormulaOwnerArchive) GetThresholdValue() []*TSCE.CellValueArchive {
	if m != nil {
		return m.ThresholdValue
	}
	return nil
}

func (m *HiddenStateFormulaOwnerArchive) GetNeedsToUpdateFilterSetForImport() bool {
	if m != nil && m.NeedsToUpdateFilterSetForImport != nil {
		return *m.NeedsToUpdateFilterSetForImport
	}
	return Default_HiddenStateFormulaOwnerArchive_NeedsToUpdateFilterSetForImport
}

type RichTextPayloadArchive struct {
	Storage          *TSP.Reference `protobuf:"bytes,1,req,name=storage" json:"storage,omitempty"`
	Range            *TSP.Range     `protobuf:"bytes,2,opt,name=range" json:"range,omitempty"`
	Cellid           *CellID        `protobuf:"bytes,3,req,name=cellid" json:"cellid,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *RichTextPayloadArchive) Reset()         { *m = RichTextPayloadArchive{} }
func (m *RichTextPayloadArchive) String() string { return proto.CompactTextString(m) }
func (*RichTextPayloadArchive) ProtoMessage()    {}

func (m *RichTextPayloadArchive) GetStorage() *TSP.Reference {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *RichTextPayloadArchive) GetRange() *TSP.Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *RichTextPayloadArchive) GetCellid() *CellID {
	if m != nil {
		return m.Cellid
	}
	return nil
}

type FormulaEqualsTokenAttachmentArchive struct {
	Super            *TSWP.UIGraphicalAttachment `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *FormulaEqualsTokenAttachmentArchive) Reset()         { *m = FormulaEqualsTokenAttachmentArchive{} }
func (m *FormulaEqualsTokenAttachmentArchive) String() string { return proto.CompactTextString(m) }
func (*FormulaEqualsTokenAttachmentArchive) ProtoMessage()    {}

func (m *FormulaEqualsTokenAttachmentArchive) GetSuper() *TSWP.UIGraphicalAttachment {
	if m != nil {
		return m.Super
	}
	return nil
}

type CellRegion struct {
	CellRanges       []*CellRange `protobuf:"bytes,1,rep,name=cell_ranges" json:"cell_ranges,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *CellRegion) Reset()         { *m = CellRegion{} }
func (m *CellRegion) String() string { return proto.CompactTextString(m) }
func (*CellRegion) ProtoMessage()    {}

func (m *CellRegion) GetCellRanges() []*CellRange {
	if m != nil {
		return m.CellRanges
	}
	return nil
}

func init() {
	proto.RegisterEnum("CellType", CellType_name, CellType_value)
	proto.RegisterEnum("CellValueType", CellValueType_name, CellValueType_value)
	proto.RegisterEnum("SelectionTypeArchive", SelectionTypeArchive_name, SelectionTypeArchive_value)
	proto.RegisterEnum("FillDirectionArchive", FillDirectionArchive_name, FillDirectionArchive_value)
	proto.RegisterEnum("MergeActionArchive", MergeActionArchive_name, MergeActionArchive_value)
	proto.RegisterEnum("HideShowActionArchive", HideShowActionArchive_name, HideShowActionArchive_value)
	proto.RegisterEnum("PopUpMenuModel_CellValueType", PopUpMenuModel_CellValueType_name, PopUpMenuModel_CellValueType_value)
	proto.RegisterEnum("TableDataList_ListType", TableDataList_ListType_name, TableDataList_ListType_value)
	proto.RegisterEnum("FormulaPredicateArchive_FormulaPredicateType", FormulaPredicateArchive_FormulaPredicateType_name, FormulaPredicateArchive_FormulaPredicateType_value)
	proto.RegisterEnum("FormulaPredicateArchive_QualifierType", FormulaPredicateArchive_QualifierType_name, FormulaPredicateArchive_QualifierType_value)
	proto.RegisterEnum("FilterSetArchive_FilterSetType", FilterSetArchive_FilterSetType_name, FilterSetArchive_FilterSetType_value)
}
